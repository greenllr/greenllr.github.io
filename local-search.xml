<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring</title>
    <link href="/2021/02/14/Spring/"/>
    <url>/2021/02/14/Spring/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis</title>
    <link href="/2021/02/14/Mybatis/"/>
    <url>/2021/02/14/Mybatis/</url>
    
    <content type="html"><![CDATA[<h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><h3 id="Mybatis是什么"><a href="#Mybatis是什么" class="headerlink" title="Mybatis是什么"></a>Mybatis是什么</h3><ul><li>MyBatis是支持定制化SQL、存储过程以及高级映射的优秀的<strong>持久层框架</strong>。</li><li>MyBatis避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</li><li>MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO(Pla in Old Java Object ,普通的Java 对象) 映射成数据库中的记录。      </li></ul><h3 id="MyBatis历史"><a href="#MyBatis历史" class="headerlink" title="MyBatis历史"></a>MyBatis历史</h3><ul><li><p>原是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation 迁移到了Google Code，随着开发团队转投Google Code旗下， iBatis3.x正式更名为MyBatis ，代码于2013年11月迁移到Github（下载地址见后）。</p></li><li><p>iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。 iBatis提供的持久层框架包括SQL Maps和Data Access Objects（DAO）.</p></li></ul><h3 id="为什么要使用MyBatis"><a href="#为什么要使用MyBatis" class="headerlink" title="为什么要使用MyBatis"></a>为什么要使用MyBatis</h3><ul><li><p>JDBC</p><blockquote><p>SQL夹在Java代码块里，耦合度高导致硬编码内伤.</p></blockquote><blockquote><p>维护不易且实际开发需求中sql是有变化，频繁修改的情况多见.</p></blockquote></li></ul><p><img src="https://gitee.com/jallenkwong/LearnMyBatis/raw/master/image/01.png" alt="img"></p><ul><li>Hibernate和JPA – 长难复杂SQL，对于Hibernate而言处理也不容易 – 内部自动生产的SQL，不容易做特殊优化。 – 基于全映射的全自动框架，大量字段的POJO进行部分映射时比较困难，导致数据库性能下降。</li></ul><p><img src="https://gitee.com/jallenkwong/LearnMyBatis/raw/master/image/02.png" alt="img"></p><ul><li>MyBatis是一个半自动化的持久化层框架。<ul><li>对开发人员而言，核心sql还是需要自己优化</li><li>sql和java编码分开，功能边界清晰，一个专注业务、一个专注数据。</li></ul></li></ul><h2 id="2、下载"><a href="#2、下载" class="headerlink" title="2、下载"></a>2、下载</h2><ul><li><a href="https://github.com/mybatis/mybatis-3/releases">MyBatis下载</a></li></ul><ul><li><a href="https://mybatis.org/mybatis-3/index.html">MyBatis官网</a></li></ul><h2 id="3、HelloWorld"><a href="#3、HelloWorld" class="headerlink" title="3、HelloWorld"></a>3、HelloWorld</h2><blockquote><p>在MySQL数据库创建一数据库实例<code>Mybatis</code>，在其创建一张表</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">CREATE TABLE <span class="hljs-title">tb_employee</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">id INT(<span class="hljs-number">11</span>)</span> PRIMARY KEY AUTO_INCREMENT,</span><br><span class="hljs-function">last_name <span class="hljs-title">VARCHAR</span><span class="hljs-params">(<span class="hljs-number">255</span>)</span>,</span><br><span class="hljs-function">gender <span class="hljs-title">CHAR</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span>,</span><br><span class="hljs-function">email <span class="hljs-title">VARCHAR</span><span class="hljs-params">(<span class="hljs-number">255</span>)</span></span><br><span class="hljs-function">)</span>;<br></code></pre></td></tr></table></figure><blockquote><p>再插进一条随意数据，用于测试</p><ul><li>创建Maven工程，添加依赖</li></ul></blockquote><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Employee.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> Integer id;<br>        <span class="hljs-keyword">private</span> String lastName;<br>        <span class="hljs-keyword">private</span> String email;<br>        <span class="hljs-keyword">private</span> String gender;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>创建mybatis配置文件，sql映射文件</p><ul><li>MyBatis 的全局配置文件包含了影响 MyBatis 行为甚深的设置（ settings）和属性（ properties）信息、如数据库连接池信息等。指导着MyBatis进行工作。我们可以参照官方文件的配置示例。</li><li>映射文件的作用就相当于是定义Dao接口的实现类如何工作。这也是 <strong>我们使用MyBatis时编写的最多的文件</strong>。</li></ul></blockquote><p><strong>mybatis-config.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="hljs-symbol">&amp;amp;</span>serverTimezone=CTT&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;UserMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>sql映射文件  </p></blockquote><p>EmployeeMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.atguigu.dao.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    namespace:名称空间;通常指定为接口的全类名</span><br><span class="hljs-comment">    id：唯一标识</span><br><span class="hljs-comment">    resultType：返回值类型</span><br><span class="hljs-comment">    #&#123;id&#125;：从传递过来的参数中取出id值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        public User getUserId(Integer id);</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserId&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.bean.User&quot;</span>&gt;</span><br>        select id,last_name lastName,email,gender from tb_employee where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisTest</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title">getSqlSessionFactory</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>String resource = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>InputStream inputStream = Resources.getResourceAsStream(resource);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1、根据xml配置文件（全局配置文件）创建一个SqlSessionFactory对象 有数据源一些运行环境信息</span><br><span class="hljs-comment"> * 2、sql映射文件；配置了每一个sql，以及sql的封装规则等。 </span><br><span class="hljs-comment"> * 3、将sql映射文件注册在全局配置文件中</span><br><span class="hljs-comment"> * 4、写代码：</span><br><span class="hljs-comment"> * 1）、根据全局配置文件得到SqlSessionFactory；</span><br><span class="hljs-comment"> * 2）、使用sqlSession工厂，获取到sqlSession对象使用他来执行增删改查</span><br><span class="hljs-comment"> * 一个sqlSession就是代表和数据库的一次会话，用完关闭</span><br><span class="hljs-comment"> * 3）、使用sql的唯一标志来告诉MyBatis执行哪个sql。sql都是保存在sql映射文件中的。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br><span class="hljs-comment">// 2、获取sqlSession实例，能直接执行已经映射的sql语句</span><br><span class="hljs-comment">// sql的唯一标识：statement Unique identifier matching the statement to use.</span><br><span class="hljs-comment">// 执行sql要用的参数：parameter A parameter object to pass to the statement.</span><br>SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();<br><br>SqlSession openSession = sqlSessionFactory.openSession();<br><span class="hljs-keyword">try</span> &#123;<br>Employee employee = openSession.selectOne(<span class="hljs-string">&quot;com.atguigu.dao.UserMapper.getEmpById&quot;</span>, <span class="hljs-number">1</span>);<br>System.out.println(employee);<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>openSession.close();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4、接口式编程"><a href="#4、接口式编程" class="headerlink" title="4、接口式编程"></a>4、接口式编程</h2><p><strong>日后主要用接口式编程</strong></p><p>HelloWorld-接口式编程</p><ul><li>创建一个Dao接口</li></ul><p>UserMapper.Java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUserId</span><span class="hljs-params">(Integer id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>修改Mapper文件（命名空间，id，returnType）</li></ul><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.atguigu.dao.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    namespace:名称空间;通常指定为接口的全类名</span><br><span class="hljs-comment">    id：唯一标识</span><br><span class="hljs-comment">    resultType：返回值类型</span><br><span class="hljs-comment">    #&#123;id&#125;：从传递过来的参数中取出id值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        public User getUserId(Integer id);</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserId&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.bean.User&quot;</span>&gt;</span><br>        select id,last_name lastName,email,gender from tb_employee where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">//接口式编程</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">//1、获取sqlSessionFactory对象</span><br>        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();<br>        <span class="hljs-comment">//2、获取sqlSession对象</span><br>        SqlSession sqlSession = sqlSessionFactory.openSession();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//3、获取接口的实现类对象</span><br>            <span class="hljs-comment">//会为接口自动的创建一个代理对象，代理对象去执行增删改查方法</span><br>            UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br><br>            User user = mapper.getUserId(<span class="hljs-number">1</span>);<br>            System.out.println(user);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            sqlSession.close();<br>        &#125;<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5、小结"><a href="#5、小结" class="headerlink" title="5、小结"></a>5、小结</h2><ol><li>接口式编程<ul><li>原生： Dao ====&gt; DaoImpl</li><li>mybatis： Mapper ====&gt; xxMapper.xml</li></ul></li><li>SqlSession代表和数据库的一次会话；用完必须关闭；</li><li>SqlSession和connection一样它都是非线程安全。每次使用都应该去获取新的对象。</li><li>mapper接口没有实现类，但是mybatis会为这个接口生成一个代理对象。 （将接口和xml进行绑定）<code>UserMapper mapper = sqlSession.getMapper(UserMapper.class);</code></li><li>两个重要的配置文件：<ul><li>mybatis的全局配置文件：包含数据库连接池信息，事务管理器信息等…系统运行环境信息</li><li>sql映射文件：保存了每一个sql语句的映射信息：将sql抽取出来。</li></ul></li></ol><h2 id="6、全局配置文件-引入dtd约束"><a href="#6、全局配置文件-引入dtd约束" class="headerlink" title="6、全局配置文件-引入dtd约束"></a>6、全局配置文件-引入dtd约束</h2><h3 id="MyBatis-全局配置文件"><a href="#MyBatis-全局配置文件" class="headerlink" title="MyBatis-全局配置文件"></a>MyBatis-全局配置文件</h3><p>MyBatis 的配置文件包含了影响 MyBatis 行为甚深的设置（ settings）和属性（ properties）信息。文档的顶层结构如下：</p><ul><li>configuration 配置<ul><li>properties 属性</li><li>settings 设置</li><li>typeAliases 类型命名</li><li>typeHandlers 类型处理器</li><li>objectFactory 对象工厂</li><li>plugins 插件</li><li>environments 环境<ul><li>environment 环境变量<ul><li>transactionManager 事务管理器</li><li>dataSource 数据源</li></ul></li></ul></li><li>databaseIdProvider 数据库厂商标识</li><li>mappers 映射器</li></ul></li></ul><h3 id="引入dtd约束"><a href="#引入dtd约束" class="headerlink" title="引入dtd约束"></a>引入dtd约束</h3><blockquote><p>有时Eclipse在编辑全局xml或映射xml时没有编辑提示，这时可手动导入dtd，导入后才有编辑提示</p><p>dtd文件在Mybatis的Jar包的org/apache/ibatis/builder/xml，导入前需Mybatis的Jar包中的dtd存放到本地目录</p><p>设置路径：Window -&gt; Preferences -&gt; XML -&gt; XML Catalog -&gt; Add Catalog Entry -&gt;Set URL key and DTD local location</p></blockquote><h2 id="7、全局配置文件-properties-引入外部配置文件"><a href="#7、全局配置文件-properties-引入外部配置文件" class="headerlink" title="7、全局配置文件-properties-引入外部配置文件"></a>7、全局配置文件-properties-引入外部配置文件</h2><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html">官方文档</a></p><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        1、mybatis可以使用properties来引入外部文件</span><br><span class="hljs-comment">        resource:引入类路径下的资源</span><br><span class="hljs-comment">        url:引入磁盘路径下的资源</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;dbconfig.properties&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>dbconfig.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">jdbc.driver</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-meta">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis</span><br><span class="hljs-meta">jdbc.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">jdbc.password</span>=<span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>如果属性在不只一个地方进行了配置，那么 MyBatis 将按照下面的顺序来加载：</p><ul><li>在 properties 元素体内指定的属性首先被读取。</li><li>然后根据 properties 元素中的 resource 属性读取类路径下属性文件或根 据 url 属性指定的路径读取属性文件，并覆盖已读取的同名属性。</li><li>最后读取作为方法参数传递的属性，并覆盖已读取的同名属性。</li></ul><h2 id="8、全局配置文件-settings-运行时行为设置"><a href="#8、全局配置文件-settings-运行时行为设置" class="headerlink" title="8、全局配置文件-settings-运行时行为设置"></a>8、全局配置文件-settings-运行时行为设置</h2><p>这是 MyBatis 中极为重要的调整设置，它们会改变MyBatis 的运行时行为。</p><p><strong>mybatis-config.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 2、setting包含很多重要的设置项</span><br><span class="hljs-comment">         sertting：用来设置每一个设置项</span><br><span class="hljs-comment">                name：设置项名</span><br><span class="hljs-comment">                value：设置项取值</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">设置参数</th><th align="center">描述</th><th>有效值</th><th>默认值</th></tr></thead><tbody><tr><td align="center">cacheEnabled</td><td align="center">该配置影响的所有映射器中配置的缓存的全局开关。</td><td>true/false</td><td>TRUE</td></tr><tr><td align="center">lazyLoadingEnabled</td><td align="center">延迟加载的全局开关。当开启时。所有关联对象都会延迟加载。特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态。</td><td>true/false</td><td>FALSE</td></tr><tr><td align="center">useColumnLabel</td><td align="center">使用列标签代替列名。不同的驱动在这方面会有不同的表现，具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。</td><td>true/false</td><td>TRUE</td></tr><tr><td align="center">defaultStatementTimeout</td><td align="center">设置超时时间,它决定驱动等待数据库响应的秒数。</td><td>Any positive integer</td><td>Not Set (null)</td></tr><tr><td align="center">mapUnderscoreToCamelCase</td><td align="center">是否开启自动驼峰命名规则( camel case )映射即从经典数据库列名A_ COLUMN到经典Java属性名aColumn的类似映射</td><td>true/false</td><td>FALSE</td></tr></tbody></table><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings">更多设置</a></p><h2 id="9-全局配置文件-typeAliases-别名"><a href="#9-全局配置文件-typeAliases-别名" class="headerlink" title="9.全局配置文件-typeAliases-别名"></a>9.全局配置文件-typeAliases-别名</h2><p>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;Author&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;domain.blog.Author&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;Blog&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;domain.blog.Blog&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;Comment&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;domain.blog.Comment&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;Post&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;domain.blog.Post&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;Section&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;domain.blog.Section&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;Tag&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;domain.blog.Tag&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当这样配置时，Blog 可以用在任何使用 domain.blog.Blog 的地方。</p><p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;domain.blog&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>每一个在包 domain.blog 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 domain.blog.Author 的别名为 author；若有注解，则别名为其注解值。见下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Alias(&quot;author&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Author</span> </span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>值得注意的是， MyBatis已经为许多常见的 Java 类型内建 了相应的类型别名。<strong>它们都是大小写不敏感的</strong>，我们在起 别名的时候千万不要占用已有的别名。</p><table><thead><tr><th>别名</th><th>映射的类型</th><th>别名</th><th>映射的类型</th><th>别名</th><th>映射的类型</th></tr></thead><tbody><tr><td>_byte</td><td>byte</td><td>string</td><td>String</td><td>date</td><td>Date</td></tr><tr><td>_long</td><td>long</td><td>byte</td><td>Byte</td><td>decimal</td><td>BigDecimal</td></tr><tr><td>_short</td><td>short</td><td>long</td><td>Long</td><td>bigdecimal</td><td>BigDecimal</td></tr><tr><td>_int</td><td>int</td><td>short</td><td>Short</td><td>object</td><td>Object</td></tr><tr><td>_integer</td><td>int</td><td>int</td><td>Integer</td><td>map</td><td>Map</td></tr><tr><td>_double</td><td>double</td><td>integer</td><td>Integer</td><td>hashmap</td><td>HashMap</td></tr><tr><td>_float</td><td>float</td><td>double</td><td>Double</td><td>list</td><td>List</td></tr><tr><td>_boolean</td><td>boolean</td><td>float</td><td>Float</td><td>arraylist</td><td>ArrayList</td></tr><tr><td>-</td><td>-</td><td>boolean</td><td>Boolean</td><td>collection</td><td>Collection</td></tr><tr><td>-</td><td>-</td><td>-</td><td>-</td><td>iterator</td><td>Iterator</td></tr></tbody></table><p>mybatis-config3.xml</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;<br>&lt;!DOCTYPE configuration<br>        PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br>        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;<br>&lt;configuration&gt;<br>    &lt;!--<br>        <span class="hljs-number">1</span>、mybatis可以使用properties来引入外部文件<br>        resource:引入类路径下的资源<br>        url:引入磁盘路径下的资源<br>    --&gt;<br>    &lt;properties resource=&quot;dbconfig.properties&quot;&gt;&lt;/properties&gt;<br><br>    &lt;!-- <span class="hljs-number">2</span>、setting包含很多重要的设置项<br>         sertting：用来设置每一个设置项<br>                name：设置项名<br>                value：设置项取值<br>    --&gt;<br>    &lt;settings&gt;<br>        &lt;setting name=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> value=<span class="hljs-string">&quot;true&quot;</span>/&gt;<br>    &lt;/settings&gt;<br><br>    &lt;!--<span class="hljs-number">3</span>、typeAliases：别名处理器：可以为我们的java类型起别名<br>        别名不区分大小写--&gt;<br>    &lt;typeAliases&gt;<br>        &lt;!--typeAlias：为某个java类型取别名<br>                type:指定要起别名的类型全类名；默认别名就是类名小写；user<br>                alias：指定的新别名--&gt;<br>&lt;!--        &lt;typeAlias alias=<span class="hljs-string">&quot;us&quot;</span> type=<span class="hljs-string">&quot;com.atguigu.bean.User&quot;</span>/&gt;--&gt;<br>        &lt;!--<span class="hljs-keyword">package</span>:为某个包下的所有类批量起别名<br>                name：指定报名（为当前以及下面所有的后代包的每一个类都起一个默认别名（类名小写））<br>                --&gt;<br>        &lt;<span class="hljs-keyword">package</span> name=<span class="hljs-string">&quot;com.atguigu.bean&quot;</span>/&gt;<br>        &lt;!-- 批量起别名的情况下，使用<span class="hljs-meta">@Alias</span>注解为某个类型指定新的别名 --&gt;<br>    &lt;/typeAliases&gt;<br>&lt;/configuration&gt;<br></code></pre></td></tr></table></figure><h2 id="10-全局配置文件-typeHandlers-类型处理器简介"><a href="#10-全局配置文件-typeHandlers-类型处理器简介" class="headerlink" title="10.全局配置文件-typeHandlers-类型处理器简介"></a>10.全局配置文件-typeHandlers-类型处理器简介</h2><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">官方文档</a></p><p>无论是 MyBatis 在预处理语句（ PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时，都会用类型处理器将获取的值以合适的方式转换成 Java 类型。</p><table><thead><tr><th>类型处理器</th><th>Java 类型</th><th>JDBC 类型</th></tr></thead><tbody><tr><td>BooleanTypeHandler</td><td>java.lang.Boolean, boolean</td><td>数据库兼容的 BOOLEAN</td></tr><tr><td>ByteTypeHandler</td><td>java.lang.Byte, byte</td><td>数据库兼容的 NUMERIC 或 BYTE</td></tr><tr><td>ShortTypeHandler</td><td>java.lang.Short, short</td><td>数据库兼容的 NUMERIC 或 SHORT INTEGER</td></tr><tr><td>IntegerTypeHandler</td><td>java.lang.Integer, int</td><td>数据库兼容的 NUMERIC 或 INTEGER</td></tr><tr><td>LongTypeHandler</td><td>java.lang.Long, long</td><td>数据库兼容的 NUMERIC 或 LONG INTEGER</td></tr><tr><td>FloatTypeHandler</td><td>java.lang.Float, float</td><td>数据库兼容的 NUMERIC 或 FLOAT</td></tr><tr><td>DoubleTypeHandler</td><td>java.lang.Double, double</td><td>数据库兼容的 NUMERIC 或 DOUBLE</td></tr><tr><td>BigDecimalTypeHandler</td><td>java.math.BigDecimal</td><td>数据库兼容的 NUMERIC 或 DECIMAL</td></tr><tr><td>StringTypeHandler</td><td>java.lang.String</td><td>CHAR, VARCHAR</td></tr></tbody></table><h3 id="日期类型的处理"><a href="#日期类型的处理" class="headerlink" title="日期类型的处理"></a>日期类型的处理</h3><ul><li>日期和时间的处理， JDK1.8以前一直是个头疼的问题。我们通常使用JSR310规范领导者Stephen Colebourne创建的Joda-Time来操作。 1.8已经实现全部的JSR310规范了。</li><li>日期时间处理上，我们可以使用MyBatis基于JSR310（ Date and Time API）编写的各种日期时间类型处理器。</li><li>MyBatis3.4以前的版本需要我们手动注册这些处理器，以后的版本都是自动注册的</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeHandlers</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeHandler</span> <span class="hljs-attr">handler</span>=<span class="hljs-string">&quot;org.apache.ibatis.type.InstantTypeHandler&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeHandler</span> <span class="hljs-attr">handler</span>=<span class="hljs-string">&quot;org.apache.ibatis.type.LocalDateTimeTypeHandler&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeHandler</span> <span class="hljs-attr">handler</span>=<span class="hljs-string">&quot;org.apache.ibatis.type.LocalDateTypeHandler&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeHandler</span> <span class="hljs-attr">handler</span>=<span class="hljs-string">&quot;org.apache.ibatis.type.LocalTime TypeHandler&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeHandler</span> <span class="hljs-attr">handler</span>=<span class="hljs-string">&quot;org.apache.ibatis.type.0ffsetDateTimeTypeHandler&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeHandler</span> <span class="hljs-attr">handler</span>=<span class="hljs-string">&quot;org.apache.ibatis.type.OffsetTimeTypeHandler&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeHandler</span> <span class="hljs-attr">handler</span>=<span class="hljs-string">&quot;org.apache.ibatis.type.ZonedDateTimeTypeHandler&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeHandler</span> <span class="hljs-attr">handler</span>=<span class="hljs-string">&quot;org.apache.ibatis.type.YearTypeHandler&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeHandler</span> <span class="hljs-attr">handler</span>=<span class="hljs-string">&quot;org.apache.ibatis.type.MonthTypeHandler&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeHandler</span> <span class="hljs-attr">handler</span>=<span class="hljs-string">&quot;org.apache.ibatis.type.YearMonthTypeHandler&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeHandler</span> <span class="hljs-attr">handler</span>=<span class="hljs-string">&quot;org.apache.ibatis.type.JapaneseDateTypeHandler&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeHandlers</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="自定义类型处理器"><a href="#自定义类型处理器" class="headerlink" title="自定义类型处理器"></a>自定义类型处理器</h3><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers">自定义类型处理器示例</a></p><p>我们可以重写类型处理器或创建自己的类型处理器来处理不支持的或非标准的类型。</p><p>步骤：</p><ol><li>实现<code>org.apache.ibatis.type.TypeHandler</code>接口或者继承<code>org.apache.ibatis.type.BaseTypeHandler</code></li><li>指定其映射某个JDBC类型（可选操作）</li><li>在mybatis全局配置文件中注册</li></ol><h2 id="11-全局配置文件-plugins-插件简介"><a href="#11-全局配置文件-plugins-插件简介" class="headerlink" title="11.全局配置文件-plugins-插件简介"></a>11.全局配置文件-plugins-插件简介</h2><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#plugins">官方文档</a></p><p>插件是MyBatis提供的一个非常强大的机制，我们可以通过插件来修改MyBatis的一些核心行为。 插件通过动态代理机制，可以介入四大对象的任何一个方法的执行。</p><p>了解mybatis运行原理才能更好开发插件。</p><ul><li><code>Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</code></li><li><code>ParameterHandler (getParameterObject, setParameters)</code></li><li><code>ResultSetHandler (handleResultSets, handleOutputParameters)</code></li><li><code>StatementHandler (prepare, parameterize, batch, update, query</code></li></ul><h2 id="12-全局配置文件-enviroments-运行环境"><a href="#12-全局配置文件-enviroments-运行环境" class="headerlink" title="12.全局配置文件-enviroments-运行环境"></a>12.全局配置文件-enviroments-运行环境</h2><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#environments">enviroments - 官方文档</a></p><ul><li>MyBatis可以配置多种环境，比如开发、测试和生产环境需要有不同的配置。</li><li>每种环境使用一个environment标签进行配置并指定唯一标识符</li><li>可以通过environments标签中的default属性指定一个环境的标识符来快速的切换环境</li></ul><h3 id="environment-指定具体环境"><a href="#environment-指定具体环境" class="headerlink" title="environment-指定具体环境"></a>environment-指定具体环境</h3><ul><li>id：指定当前环境的唯一标识</li><li>transactionManager、和dataSource都必须有</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;dev_mysql&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dev_mysql&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure><h4 id="transactionManager"><a href="#transactionManager" class="headerlink" title="transactionManager"></a>transactionManager</h4><ul><li>type： JDBC | MANAGED | 自定义<ul><li>JDBC：使用了 JDBC 的提交和回滚设置，依赖于从数据源得到的连接来管理事务范围。JdbcTransactionFactory</li><li>MANAGED：不提交或回滚一个连接、让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 ManagedTransactionFactory</li><li>自定义：实现TransactionFactory接口， type=全类名/别名</li></ul></li></ul><h4 id="dataSource"><a href="#dataSource" class="headerlink" title="dataSource"></a>dataSource</h4><ul><li>type： UNPOOLED | POOLED | JNDI | 自定义<ul><li>UNPOOLED：不使用连接池， UnpooledDataSourceFactory</li><li>POOLED：使用连接池， PooledDataSourceFactory</li><li>JNDI： 在EJB 或应用服务器这类容器中查找指定的数据源</li><li>自定义：实现DataSourceFactory接口，定义数据源的获取方式。</li></ul></li></ul><p><strong>实际开发中我们使用Spring管理数据源，并进行事务控制的配置来覆盖上述配置</strong>。</p><h2 id="13-全局配置文件-databaseIdProvider-多数据库支持"><a href="#13-全局配置文件-databaseIdProvider-多数据库支持" class="headerlink" title="13.全局配置文件-databaseIdProvider-多数据库支持"></a>13.全局配置文件-databaseIdProvider-多数据库支持</h2><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#databaseIdProvider">databaseIdProvider - 官方文档</a></p><ul><li>MyBatis 可以根据不同的数据库厂商执行不同的语句。</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;databaseIdProvider type=<span class="hljs-string">&quot;DB_VENDOR&quot;</span>&gt;<br>  &lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;SQL Server&quot;</span> value=<span class="hljs-string">&quot;sqlserver&quot;</span>/&gt;<br>  &lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;DB2&quot;</span> value=<span class="hljs-string">&quot;db2&quot;</span>/&gt;<br>  &lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;Oracle&quot;</span> value=<span class="hljs-string">&quot;oracle&quot;</span> /&gt;<br>  &lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;MySQL&quot;</span> value=<span class="hljs-string">&quot;mysql&quot;</span> /&gt;<br>&lt;/databaseIdProvider&gt;<br></code></pre></td></tr></table></figure><ul><li>Type： DB_VENDOR 使用MyBatis提供的VendorDatabaseIdProvider解析数据库厂商标识。也可以实现DatabaseIdProvider接口来自定义。</li><li>Property-name：数据库厂商标识</li><li>Property-value：为标识起一个别名，方便SQL语句使用databaseId属性引用</li></ul><p>DB_VENDOR - 会通过 DatabaseMetaData#getDatabaseProductName() 返回的字符串进行设置。由于通常情况下这个字符串都非常长而且相同产品的不同版本会返回不同的值，所以<strong>最好通过设置属性别名来使其变短</strong></p><ul><li>databaseId属性在映射xml使用</li></ul><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs axapta">&lt;<span class="hljs-keyword">select</span> id=<span class="hljs-string">&quot;getEmpById&quot;</span> resultType=<span class="hljs-string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span><br>databaseId=<span class="hljs-string">&quot;mysql&quot;</span>&gt;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> employee <span class="hljs-keyword">where</span> id = <span class="hljs-meta">#&#123;id&#125;</span><br>&lt;/<span class="hljs-keyword">select</span>&gt;<br>&lt;<span class="hljs-keyword">select</span> id=<span class="hljs-string">&quot;getEmpById&quot;</span> resultType=<span class="hljs-string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span><br>databaseId=<span class="hljs-string">&quot;oracle&quot;</span>&gt;<br><span class="hljs-keyword">select</span> e.* <span class="hljs-keyword">from</span> employee e <span class="hljs-keyword">where</span> id = <span class="hljs-meta">#&#123;id&#125;</span><br>&lt;/<span class="hljs-keyword">select</span>&gt;<br></code></pre></td></tr></table></figure><ul><li>通过<code>&lt;environments default=&quot;mysql&quot;&gt;</code>切换数据库，便能切换SQL</li></ul><p>MyBatis匹配规则如下：</p><ol><li>如果没有配置databaseIdProvider标签，那么databaseId=null</li><li>如果配置了databaseIdProvider标签，使用标签配置的name去匹配数据库信息，匹配上设置databaseId=配置指定的值，否则依旧为null</li><li>如果databaseId不为null，他只会找到配置databaseId的sql语句</li><li>MyBatis 会加载不带 databaseId 属性和带有匹配当前数据库 databaseId 属性的所有语句。如果同时找到带有 databaseId 和不带 databaseId 的相同语句， 则后者会被舍弃。</li></ol><h2 id="14-全局配置文件-mappers-sql映射注册"><a href="#14-全局配置文件-mappers-sql映射注册" class="headerlink" title="14.全局配置文件-mappers-sql映射注册"></a>14.全局配置文件-mappers-sql映射注册</h2><p>既然 MyBatis 的行为已经由上述元素配置完了，我们现在就要来定义 SQL 映射语句了。 但首先，我们需要告诉 MyBatis 到哪里去找到这些语句。 在自动查找资源方面，Java 并没有提供一个很好的解决方案，所以<strong>最好的办法是直接告诉 MyBatis 到哪里去找映射文件</strong>。 你可以使用相对于类路径的资源引用，或完全限定资源定位符（包括 file:/// 形式的 URL），或类名和包名等。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/builder/AuthorMapper.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/builder/BlogMapper.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file:///var/mappers/AuthorMapper.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file:///var/mappers/BlogMapper.xml&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file:///var/mappers/PostMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">注册接口</span><br><span class="hljs-comment">class：引用（注册）接口，</span><br><span class="hljs-comment">1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下；</span><br><span class="hljs-comment">2、没有sql映射文件，所有的sql都是利用注解写在接口上;</span><br><span class="hljs-comment">推荐：</span><br><span class="hljs-comment">比较重要的，复杂的Dao接口我们来写sql映射文件</span><br><span class="hljs-comment">不重要，简单的Dao接口为了开发快速可以使用注解；</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.builder.BlogMapper&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.builder.PostMapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.mybatis.builder&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这些配置会告诉 MyBatis 去哪里找映射文件</p><h2 id="15-小结-2"><a href="#15-小结-2" class="headerlink" title="15.小结(2)"></a>15.小结(2)</h2><p>注意mybatis全局配置文件中的标签顺序，需要按以下顺序排列，否则抛异常</p><ul><li>configuration 配置<ul><li>properties 属性</li><li>settings 设置</li><li>typeAliases 类型命名</li><li>typeHandlers 类型处理器</li><li>objectFactory 对象工厂</li><li>plugins 插件</li><li>environments 环境<ul><li>environment 环境变量<ul><li>transactionManager 事务管理器</li><li>dataSource 数据源</li></ul></li></ul></li><li>databaseIdProvider 数据库厂商标识</li><li>mappers 映射器</li></ul></li></ul><h2 id="16-映射文件-增删改查"><a href="#16-映射文件-增删改查" class="headerlink" title="16.映射文件-增删改查"></a>16.映射文件-增删改查</h2><p>映射文件指导着MyBatis如何进行数据库增删改查，有着非常重要的意义；</p><ul><li>cache –命名空间的二级缓存配置</li><li>cache-ref – 其他命名空间缓存配置的引用。</li><li>resultMap – 自定义结果集映射</li><li>parameterMap – <strong>已废弃</strong>！老式风格的参数映射</li><li>sql –抽取可重用语句块。</li><li>insert – 映射插入语句</li><li>update – 映射更新语句</li><li>delete – 映射删除语句</li><li>select – 映射查询语句</li></ul><h3 id="CRUD初体验"><a href="#CRUD初体验" class="headerlink" title="CRUD初体验"></a>CRUD初体验</h3><p><a href="https://gitee.com/jallenkwong/LearnMyBatis/blob/master/src/main/java/com/lun/c03/mapper/dao/EmployeeMapper.java">EmployeeMapper.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmployeeMapper</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Employee <span class="hljs-title">getEmpById</span><span class="hljs-params">(Integer id)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">addEmp</span><span class="hljs-params">(Employee employee)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">updateEmp</span><span class="hljs-params">(Employee employee)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteEmpById</span><span class="hljs-params">(Integer id)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><hr><p><a href="https://gitee.com/jallenkwong/LearnMyBatis/blob/master/src/main/resources/c03/EmployeeMapper.xml">EmployeeMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.lun.c03.mapper.dao.EmployeeMapper&quot;</span>&gt;</span><br><br> <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span><br>select * from employee where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- public void addEmp(Employee employee); --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addEmp&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span> &gt;</span><br>insert into employee(last_name,email,gender) <br>values(#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- public void updateEmp(Employee employee);  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateEmp&quot;</span>&gt;</span><br>update employee <br>set last_name=#&#123;lastName&#125;,email=#&#123;email&#125;,gender=#&#123;gender&#125;<br>where id=#&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- public void deleteEmpById(Integer id); --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteEmpById&quot;</span>&gt;</span><br>delete from employee where id=#&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><p><a href="https://gitee.com/jallenkwong/LearnMyBatis/blob/master/src/test/java/com/lun/c03/mapper/EmployeeMapperTest.java">EmployeeMapperTest.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MapperTest</span> </span>&#123;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testCrud</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>SqlSessionFactory ssf = Tools.getSqlSessionFactory(<span class="hljs-string">&quot;c03/mybatis-config.xml&quot;</span>);<br><br>SqlSession session = ssf.openSession();<br><br><span class="hljs-keyword">try</span> &#123;<br>EmployeeMapper mapper = session.getMapper(EmployeeMapper.class);<br><br>Employee newEmployee = <span class="hljs-keyword">new</span> Employee(<span class="hljs-keyword">null</span>,<span class="hljs-string">&quot;kuang&quot;</span>,<span class="hljs-string">&quot;kuang@163.com&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>);<br><br><span class="hljs-comment">//增</span><br>Long count = mapper.addEmp(newEmployee);<br><br><span class="hljs-comment">//查</span><br>System.out.println(<span class="hljs-string">&quot;After creating : &quot;</span> + mapper.getEmpById(newEmployee.getId()));<br><br><span class="hljs-comment">//改</span><br>newEmployee.setGender(<span class="hljs-string">&quot;0&quot;</span>);<br>mapper.updateEmp(newEmployee);<br><br><span class="hljs-comment">//查</span><br>System.out.println(<span class="hljs-string">&quot;After updating : &quot;</span> + mapper.getEmpById(newEmployee.getId()));<br><br><span class="hljs-comment">//删</span><br>mapper.deleteEmpById(newEmployee.getId());<br>System.out.println(<span class="hljs-string">&quot;After deleting : &quot;</span> + mapper.getEmpById(newEmployee.getId()));<br><br>session.commit();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>session.close();<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h3><ol><li>mybatis允许增删改直接定义以下类型返回值<ul><li>Integer、Long、Boolean、void</li></ul></li><li>我们需要手动提交数据<ul><li>sqlSessionFactory.openSession();===》手动提交</li><li>sqlSessionFactory.openSession(true);===》自动提交</li></ul></li></ol><h2 id="17-映射文件-insert-获取自增主键的值"><a href="#17-映射文件-insert-获取自增主键的值" class="headerlink" title="17.映射文件-insert-获取自增主键的值"></a>17.映射文件-insert-获取自增主键的值</h2><ul><li>parameterType：参数类型，可以省略，</li><li>获取自增主键的值：<ul><li>mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGenreatedKeys()；</li><li>useGeneratedKeys=”true”；使用自增主键获取主键值策略</li><li>keyProperty；指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性</li></ul></li></ul><p><a href="https://gitee.com/jallenkwong/LearnMyBatis/blob/master/src/main/resources/c03/EmployeeMapper.xml">EmployeeMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- public void addEmp(Employee employee); --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addEmp&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span> &gt;</span><br>insert into employee(last_name,email,gender) <br>values(#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;)<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="18-映射文件-insert-Oracle使用序列生成主键演示"><a href="#18-映射文件-insert-Oracle使用序列生成主键演示" class="headerlink" title="18.映射文件-insert-Oracle使用序列生成主键演示"></a>18.映射文件-insert-Oracle使用序列生成主键演示</h2><ul><li>Oracle不支持自增；Oracle使用序列来模拟自增；</li><li>每次插入的数据的主键是从序列中拿到的值；如何获取到这个值；</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">#从序列获取新主键值<br>select employee_seq.nextval from dual;<br></code></pre></td></tr></table></figure><h2 id="19-映射文件-insert-获取非自增主键的值-selectKey"><a href="#19-映射文件-insert-获取非自增主键的值-selectKey" class="headerlink" title="19.映射文件-insert-获取非自增主键的值-selectKey"></a>19.映射文件-insert-获取非自增主键的值-selectKey</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addEmp&quot;</span> <span class="hljs-attr">databaseId</span>=<span class="hljs-string">&quot;oracle&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">keyProperty:查出的主键值封装给javaBean的哪个属性</span><br><span class="hljs-comment">order=&quot;BEFORE&quot;:当前sql在插入sql之前运行</span><br><span class="hljs-comment">   AFTER：当前sql在插入sql之后运行</span><br><span class="hljs-comment">resultType:查出的数据的返回值类型</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">BEFORE运行顺序：</span><br><span class="hljs-comment">先运行selectKey查询id的sql；查出id值封装给javaBean的id属性</span><br><span class="hljs-comment">在运行插入的sql；就可以取出id属性对应的值</span><br><span class="hljs-comment">AFTER运行顺序：</span><br><span class="hljs-comment">先运行插入的sql（从序列中取出新值作为id）；</span><br><span class="hljs-comment">再运行selectKey查询id的sql；</span><br><span class="hljs-comment"> --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">selectKey</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">order</span>=<span class="hljs-string">&quot;BEFORE&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Integer&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 编写查询主键的sql语句 --&gt;</span><br><span class="hljs-comment">&lt;!-- BEFORE--&gt;</span><br>select EMPLOYEES_SEQ.nextval from dual <br><span class="hljs-comment">&lt;!-- AFTER：</span><br><span class="hljs-comment"> select EMPLOYEES_SEQ.currval from dual --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">selectKey</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 插入时的主键是从序列中拿到的 --&gt;</span><br><span class="hljs-comment">&lt;!-- BEFORE:--&gt;</span><br>insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL) <br>values(#&#123;id&#125;,#&#123;lastName&#125;,#&#123;email<span class="hljs-comment">&lt;!-- ,jdbcType=NULL --&gt;</span>&#125;) <br><br><span class="hljs-comment">&lt;!-- AFTER：</span><br><span class="hljs-comment">insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL) </span><br><span class="hljs-comment">values(employees_seq.nextval,#&#123;lastName&#125;,#&#123;email&#125;) --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>selectKey 元素的属性</strong></p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>keyProperty</td><td>selectKey 语句结果应该被设置到的目标属性。如果生成列不止一个，可以用逗号分隔多个属性名称。</td></tr><tr><td>keyColumn</td><td>返回结果集中生成列属性的列名。如果生成列不止一个，可以用逗号分隔多个属性名称。</td></tr><tr><td>resultType</td><td>结果的类型。通常 MyBatis 可以推断出来，但是为了更加准确，写上也不会有什么问题。MyBatis 允许将任何简单类型用作主键的类型，包括字符串。如果生成列不止一个，则可以使用包含期望属性的 Object 或 Map。</td></tr><tr><td>order</td><td>可以设置为 BEFORE 或 AFTER。如果设置为 BEFORE，那么它首先会生成主键，设置 keyProperty 再执行插入语句。如果设置为 AFTER，那么先执行插入语句，然后是 selectKey 中的语句 - 这和 Oracle 数据库的行为相似，在插入语句内部可能有嵌入索引调用。</td></tr><tr><td>statementType</td><td>和前面一样，MyBatis 支持 STATEMENT，PREPARED 和 CALLABLE 类型的映射语句，分别代表 Statement, PreparedStatement 和 CallableStatement 类型。</td></tr></tbody></table><h2 id="20-映射文件-参数处理-单个参数-amp-多个参数-amp-命名参数"><a href="#20-映射文件-参数处理-单个参数-amp-多个参数-amp-命名参数" class="headerlink" title="20.映射文件-参数处理-单个参数&amp;多个参数&amp;命名参数"></a>20.映射文件-参数处理-单个参数&amp;多个参数&amp;命名参数</h2><ul><li>单个参数：mybatis不会做特殊处理，<ul><li><code>#&#123;参数名/任意名&#125;</code>：取出参数值。</li></ul></li><li>多个参数：mybatis会做特殊处理。<ul><li>通常操作：<ul><li>方法：public Employee getEmpByIdAndLastName(Integer id,String lastName);</li><li>取值：<code>#&#123;id&#125;</code>,<code>#&#123;lastName&#125;</code></li></ul></li><li>上述操作会抛出异常：<code>org.apache.ibatis.binding.BindingException: Parameter &#39;id&#39; not found. Available parameters are [1, 0, param1, param2]</code></li><li>多个参数会被封装成 一个map，<ul><li>key：param1…paramN,或者参数的索引也可以</li><li>value：传入的参数值</li></ul></li><li><code>#&#123;&#125;</code>就是从map中获取指定的key的值；</li></ul></li><li>【命名参数】：明确指定封装参数时map的key；@Param(“id”)<ul><li>多个参数会被封装成 一个map，<ul><li>key：使用@Param注解指定的值</li><li>value：参数值</li></ul></li><li><code>#&#123;指定的key&#125;</code>取出对应的参数值</li></ul></li></ul><p><a href="https://gitee.com/jallenkwong/LearnMyBatis/blob/master/src/test/java/com/lun/c03/mapper/EmployeeMapperTest.java">EmployeeMapperTest.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testParameters</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>SqlSessionFactory ssf = Tools.getSqlSessionFactory(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br><br>SqlSession session = ssf.openSession();<br><br><span class="hljs-keyword">try</span> &#123;<br>EmployeeMapper mapper = session.getMapper(EmployeeMapper.class);<br><br><span class="hljs-comment">//1. </span><br><span class="hljs-comment">//单个参数：mybatis不会做特殊处理</span><br>System.out.println(mapper.getEmpById2(<span class="hljs-number">1</span>));<br><br><span class="hljs-comment">//2.</span><br><span class="hljs-comment">//多个参数，未作处理 ，mapper直用#&#123;id&#125;,#&#123;lastName&#125;会抛异常 </span><br><span class="hljs-keyword">try</span> &#123;<br>System.out.println(mapper.getEmpByIdAndLastName(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;jallen&quot;</span>));<br><span class="hljs-comment">//org.apache.ibatis.exceptions.PersistenceException: </span><br><span class="hljs-comment">//### Error querying database.  Cause: org.apache.ibatis.binding.BindingException: Parameter &#x27;id&#x27; not found. Available parameters are [0, 1, param1, param2]</span><br><span class="hljs-comment">//### Cause: org.apache.ibatis.binding.BindingException: Parameter &#x27;id&#x27; not found. Available parameters are [0, 1, param1, param2]</span><br>&#125;<span class="hljs-keyword">catch</span>(PersistenceException ex) &#123;<br>System.err.println(ex);<br>&#125;<br><br><span class="hljs-comment">//多个参数会被封装成 一个map</span><br><span class="hljs-comment">//key：param1...paramN,或者参数的索引0, 1..也可以(这种方法的可读性较差)</span><br><span class="hljs-comment">//value：传入的参数值</span><br>System.out.println(mapper.getEmpByIdAndLastName2(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;jallen&quot;</span>));<br>System.out.println(mapper.getEmpByIdAndLastName3(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;jallen&quot;</span>));<br><br><br><span class="hljs-comment">//3. </span><br><span class="hljs-comment">//【命名参数】：明确指定封装参数时map的key；@Param(&quot;id&quot;)</span><br>System.out.println(mapper.getEmpByIdAndLastName4(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;jallen&quot;</span>));<br><br><br>session.commit();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>session.close();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><a href="https://gitee.com/jallenkwong/LearnMyBatis/blob/master/src/main/resources/c03/EmployeeMapper.xml">EmployeeMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.lun.c03.mapper.dao.EmployeeMapper&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 多个参数，不能直写id或lastName，否则抛出 org.apache.ibatis.binding.BindingException: Parameter &#x27;id&#x27; not found. Available parameters are [1, 0, param1, param2]--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByIdAndLastName&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span><br> select * from tbl_employee where id = #&#123;id&#125; and last_name=#&#123;lastName&#125;<br> <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByIdAndLastName2&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span><br> select * from employee where id = #&#123;0&#125; and last_name=#&#123;1&#125;<br> <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByIdAndLastName3&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span><br> select * from employee where id = #&#123;param1&#125; and last_name=#&#123;param2&#125;<br> <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByIdAndLastName4&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span><br> select * from employee where id = #&#123;id&#125; and last_name=#&#123;lastName&#125;<br> <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure><hr><p><a href="https://gitee.com/jallenkwong/LearnMyBatis/blob/master/src/main/java/com/lun/c03/mapper/dao/EmployeeMapper.java">EmployeeMapper.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmployeeMapper</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Employee <span class="hljs-title">getEmpByIdAndLastName</span><span class="hljs-params">(Integer id, String name)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Employee <span class="hljs-title">getEmpByIdAndLastName2</span><span class="hljs-params">(Integer id, String name)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Employee <span class="hljs-title">getEmpByIdAndLastName3</span><span class="hljs-params">(Integer id, String name)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Employee <span class="hljs-title">getEmpByIdAndLastName4</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span>Integer id,// </span></span><br><span class="hljs-function"><span class="hljs-params"><span class="hljs-meta">@Param(&quot;lastName&quot;)</span>String name)</span></span>;<br>...<br></code></pre></td></tr></table></figure><h2 id="21-映射文件-参数处理-POJO-amp-Map-amp-TO"><a href="#21-映射文件-参数处理-POJO-amp-Map-amp-TO" class="headerlink" title="21.映射文件-参数处理-POJO&amp;Map&amp;TO"></a>21.映射文件-参数处理-POJO&amp;Map&amp;TO</h2><ul><li>POJO：如果多个参数正好是我们业务逻辑的数据模型，我们就可以直接传入pojo；<ul><li><code>#&#123;属性名&#125;</code>：取出传入的pojo的属性值</li></ul></li><li>Map：如果多个参数不是业务模型中的数据，没有对应的pojo，不经常使用，为了方便，我们也可以传入map<ul><li><code>#&#123;key&#125;</code>：取出map中对应的值</li></ul></li><li>TO：如果多个参数不是业务模型中的数据，但是经常要使用，推荐来编写一个TO（Transfer Object）数据传输对象，如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Page&#123;<br><span class="hljs-keyword">int</span> index;<br><span class="hljs-keyword">int</span> size;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><a href="https://gitee.com/jallenkwong/LearnMyBatis/blob/master/src/test/java/com/lun/c03/mapper/EmployeeMapperTest.java">EmployeeMapperTest.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testParameters</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>SqlSessionFactory ssf = Tools.getSqlSessionFactory(<span class="hljs-string">&quot;c03/mybatis-config.xml&quot;</span>);<br><br>SqlSession session = ssf.openSession();<br><br><span class="hljs-keyword">try</span> &#123;<br>EmployeeMapper mapper = session.getMapper(EmployeeMapper.class);<br><br>...<br><span class="hljs-comment">//4.</span><br><span class="hljs-comment">//传入map</span><br>Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-number">1</span>);<br>map.put(<span class="hljs-string">&quot;lastName&quot;</span>, <span class="hljs-string">&quot;jallen&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;4. &quot;</span> + mapper.getEmpByMap(map));<br><br>session.commit();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>session.close();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p><a href="https://gitee.com/jallenkwong/LearnMyBatis/blob/master/src/main/resources/c03/EmployeeMapper.xml">EmployeeMapper.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.lun.c03.mapper.dao.EmployeeMapper&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- map 作参输入 --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span><br> select * from employee where id = #&#123;id&#125; and last_name=#&#123;lastName&#125;<br> <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure><hr><p><a href="https://gitee.com/jallenkwong/LearnMyBatis/blob/master/src/main/java/com/lun/c03/mapper/dao/EmployeeMapper.java">EmployeeMapper.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmployeeMapper</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Employee <span class="hljs-title">getEmpByMap</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span></span>;<br>...<br></code></pre></td></tr></table></figure><h2 id="22-映射文件-参数处理-参数封装扩展思考"><a href="#22-映射文件-参数处理-参数封装扩展思考" class="headerlink" title="22.映射文件-参数处理-参数封装扩展思考"></a>22.映射文件-参数处理-参数封装扩展思考</h2><p>========================思考================================</p><ul><li><p><code>public Employee getEmp(@Param(&quot;id&quot;)Integer id,String lastName);</code></p><ul><li>取值：id==&gt;#{id/param1} lastName==&gt;#{param2}</li></ul></li><li><p><code>public Employee getEmp(Integer id,@Param(&quot;e&quot;)Employee emp);</code></p><ul><li>取值：id==&gt;#{param1} lastName===&gt;#{param2.lastName/e.lastName}</li></ul></li><li><p><strong>特别注意</strong>：如果是Collection（List、Set）类型或者是数组，</p><ul><li><p>也会特殊处理。也是把传入的list或者数组封装在map中。</p></li><li><p>key：Collection（collection）,如果是List还可以使用这个key(list)</p></li><li><p>```java<br>public Employee getEmpById(List<Integer> ids);</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs processing"><br>    - 取值：取出第一个id的值： #&#123;list[<span class="hljs-number">0</span>]&#125;<br><br>## <span class="hljs-number">23.</span>源码分析-参数处理-参数封装<span class="hljs-built_in">map</span>的过程<br><br>**结合源码，mybatis怎么处理参数**<br><br>- (@Param(<span class="hljs-string">&quot;id&quot;</span>)Integer id,@Param(<span class="hljs-string">&quot;lastName&quot;</span>)<span class="hljs-keyword">String</span> lastName);<br>- ParamNameResolver解析参数封装<span class="hljs-built_in">map</span>的；<br>- names：&#123;<span class="hljs-number">0</span>=id, <span class="hljs-number">1</span>=lastName&#125;；构造器的时候就确定好了<br><br>确定流程： <span class="hljs-number">1.</span>获取每个标了param注解的参数的@Param的值：id，lastName； 赋值给name; <span class="hljs-number">2.</span>每次解析一个参数给<span class="hljs-built_in">map</span>中保存信息：（<span class="hljs-built_in">key</span>：参数索引，value：name的值） name的值： 标注了param注解：注解的值 没有标注： <span class="hljs-number">1.</span>全局配置：useActualParamName（jdk1<span class="hljs-number">.8</span>）：name=参数名 <span class="hljs-number">2.</span>name=<span class="hljs-built_in">map</span>.<span class="hljs-built_in">size</span>()；相当于当前元素的索引 &#123;<span class="hljs-number">0</span>=id, <span class="hljs-number">1</span>=lastName,<span class="hljs-number">2</span>=<span class="hljs-number">2</span>&#125;<br><br>args【<span class="hljs-number">1</span>，<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-string">&#x27;hello&#x27;</span>】:<br><br>```java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">Object</span> getNamedParams(<span class="hljs-keyword">Object</span>[] args) &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-built_in">int</span> paramCount = names.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-comment">//1、参数为null直接返回</span><br>    <span class="hljs-keyword">if</span> (args == <span class="hljs-keyword">null</span> || paramCount == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>     <br>    <span class="hljs-comment">//2、如果只有一个元素，并且没有Param注解；args[0]：单个参数直接返回</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!hasParamAnnotation &amp;&amp; paramCount == <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">return</span> args[names.firstKey()];<br>      <br>    <span class="hljs-comment">//3、多个元素或者有Param标注</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">final</span> Map&lt;<span class="hljs-keyword">String</span>, <span class="hljs-keyword">Object</span>&gt; param = <span class="hljs-keyword">new</span> ParamMap&lt;<span class="hljs-keyword">Object</span>&gt;();<br>      <span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;<br>      <br>      <span class="hljs-comment">//4、遍历names集合；&#123;0=id, 1=lastName,2=2&#125;</span><br>      <span class="hljs-keyword">for</span> (Map.Entry&lt;Integer, <span class="hljs-keyword">String</span>&gt; entry : names.entrySet()) &#123;<br>      <br>      <span class="hljs-comment">//names集合的value作为key;  names集合的key又作为取值的参考args[0]:args【1，&quot;Tom&quot;】:</span><br>      <span class="hljs-comment">//eg:&#123;id=args[0]:1,lastName=args[1]:Tom,2=args[2]&#125;</span><br>        param.put(entry.getValue(), args[entry.getKey()]);<br>        <br>        <br>        <span class="hljs-comment">// add generic param names (param1, param2, ...)param</span><br>        <span class="hljs-comment">//额外的将每一个参数也保存到map中，使用新的key：param1...paramN</span><br>        <span class="hljs-comment">//效果：有Param注解可以#&#123;指定的key&#125;，或者#&#123;param1&#125;</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> genericParamName = GENERIC_NAME_PREFIX + <span class="hljs-keyword">String</span>.valueOf(i + <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// ensure not to overwrite parameter named with @Param</span><br>        <span class="hljs-keyword">if</span> (!names.containsValue(genericParamName)) &#123;<br>          param.put(genericParamName, args[entry.getKey()]);<br>        &#125;<br>        i++;<br>      &#125;<br>      <span class="hljs-keyword">return</span> param;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><p><strong>总结</strong>：参数多时会封装map，为了不混乱，我们可以使用@Param来指定封装时使用的key；#{key}就可以取出map中的值；</p><h2 id="24-映射文件-参数处理-与-取值区别"><a href="#24-映射文件-参数处理-与-取值区别" class="headerlink" title="24.映射文件-参数处理-#与$取值区别"></a>24.映射文件-参数处理-#与$取值区别</h2><p><code>#&#123;&#125;</code>和<code>$&#123;&#125;</code>都可以获取map中的值或者pojo对象属性的值；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">select * from tbl_employee where id=$&#123;id&#125; and last_name=#&#123;lastName&#125;<br>#Preparing:<br>select * from tbl_employee where id=2 and last_name=?<br></code></pre></td></tr></table></figure><p><strong>区别</strong>：</p><ul><li><code>#&#123;&#125;</code> : 是以预编译的形式，将参数设置到sql语句中；PreparedStatement；防止sql注入</li><li><code>$&#123;&#125;</code> : 取出的值<strong>直接拼装</strong>在sql语句中；会有安全问题；</li></ul><p>大多情况下，我们去参数的值都应该去使用<code>#&#123;&#125;</code>。</p><p>原生jdbc不支持占位符的地方我们就可以使用<code>$&#123;&#125;</code>进行取值，比如分表、排序。。。；按照年份分表拆分</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">select * from $&#123;year&#125;_salary where xxx;<br>select * from tbl_employee order by $&#123;f_name&#125; $&#123;order&#125;<br></code></pre></td></tr></table></figure><h2 id="25-映射文件-参数处理-取值时指定参数相关规则"><a href="#25-映射文件-参数处理-取值时指定参数相关规则" class="headerlink" title="25.映射文件-参数处理-#取值时指定参数相关规则"></a>25.映射文件-参数处理-#取值时指定参数相关规则</h2><p><code>#&#123;&#125;</code>:更丰富的用法：</p><p>规定参数的一些规则：</p><ul><li>javaType、</li><li>jdbcType、</li><li>mode（存储过程）、</li><li>numericScale、</li><li>resultMap、</li><li>typeHandler、</li><li>jdbcTypeName、</li><li>expression（未来准备支持的功能）；</li></ul><p>例如：jdbcType</p><p>jdbcType通常需要在某种特定的条件下被设置：</p><ul><li>在我们数据为null的时候，有些数据库可能不能识别mybatis对null的默认处理。比如Oracle DB（报错）；</li><li>JdbcType OTHER：无效的类型；因为mybatis对所有的null都映射的是原生Jdbc的OTHER类型，Oracle DB不能正确处理;</li></ul><p>由于全局配置中：jdbcTypeForNull=OTHER，Oracle DB不支持，两种解决方法：</p><ol><li>在mapper文件中写<code>#&#123;email,jdbcType=NULL&#125;</code>;</li><li>在全局配置文件<code>&lt;setting name=&quot;jdbcTypeForNull&quot; value=&quot;NULL&quot;/&gt;</code></li></ol><h2 id="26-映射文件-select-返回List"><a href="#26-映射文件-select-返回List" class="headerlink" title="26.映射文件-select-返回List"></a>26.映射文件-select-返回List</h2><p>[EmployeeMapper.xml]</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.lun.c03.mapper.dao.EmployeeMapper&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- public List&lt;Employee&gt; getEmpsByLastNameLike(String lastName); --&gt;</span><br><span class="hljs-comment">&lt;!--resultType：如果返回的是一个集合，要写集合中元素的类型  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpsByLastNameLike&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span><br>select * from employee where last_name like #&#123;lastName&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure><hr><p>[EmployeeMapper.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmployeeMapper</span> </span>&#123;<br><br><span class="hljs-comment">//// return Collection</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Employee&gt; <span class="hljs-title">getEmpsByLastNameLike</span><span class="hljs-params">(String str)</span></span>;<br>...<br></code></pre></td></tr></table></figure><hr><p>[EmployeeMapperTest.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testList</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>SqlSessionFactory ssf = Tools.getSqlSessionFactory(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>SqlSession session = ssf.openSession();<br><br><span class="hljs-keyword">try</span> &#123;<br>EmployeeMapper em = session.getMapper(EmployeeMapper.class);<br>List&lt;Employee&gt; result = em.getEmpsByLastNameLike(<span class="hljs-string">&quot;%a%&quot;</span>);<br>System.out.println(result);<br><br>session.commit();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>session.close();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="27-映射文件-select-记录封装map"><a href="#27-映射文件-select-记录封装map" class="headerlink" title="27.映射文件-select-记录封装map"></a>27.映射文件-select-记录封装map</h2><p>[EmployeeMapper.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmployeeMapper</span> </span>&#123;<br><br><span class="hljs-comment">//多条记录封装一个map：Map&lt;Integer,Employee&gt;:键是这条记录的主键，值是记录封装后的javaBean</span><br><span class="hljs-comment">//@MapKey:告诉mybatis封装这个map的时候使用哪个属性作为map的key</span><br><span class="hljs-meta">@MapKey(&quot;lastName&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Employee&gt; <span class="hljs-title">getEmpByLastNameLikeReturnMap</span><span class="hljs-params">(String lastName)</span></span>;<br><br><span class="hljs-comment">//返回一条记录的map；key就是列名，值就是对应的值</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">getEmpByIdReturnMap</span><span class="hljs-params">(Integer id)</span></span>;<br>...<br></code></pre></td></tr></table></figure><hr><p>[EmployeeMapper.xml]</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.lun.c03.mapper.dao.EmployeeMapper&quot;</span>&gt;</span><br><br> <span class="hljs-comment">&lt;!--public Map&lt;Integer, Employee&gt; getEmpByLastNameLikeReturnMap(String lastName);  --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByLastNameLikeReturnMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span><br> select * from employee where last_name like #&#123;lastName&#125;<br> <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br> <br> <span class="hljs-comment">&lt;!--public Map&lt;String, Object&gt; getEmpByIdReturnMap(Integer id);  --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByIdReturnMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br> select * from employee where id=#&#123;id&#125;<br> <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure><hr><p>[MapperTest]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testMap</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>SqlSessionFactory ssf = Tools.getSqlSessionFactory(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>SqlSession session = ssf.openSession();<br><br><span class="hljs-keyword">try</span> &#123;<br>EmployeeMapper em = session.getMapper(EmployeeMapper.class);<br>Map&lt;String, Object&gt; result = em.getEmpByIdReturnMap(<span class="hljs-number">1</span>);<br>System.out.println(result);<br><br>System.out.println(<span class="hljs-string">&quot;---&quot;</span>);<br>Map&lt;String, Employee&gt; result2 = em.getEmpByLastNameLikeReturnMap(<span class="hljs-string">&quot;%a%&quot;</span>);<br>System.out.println(result2);<br><br>session.commit();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>session.close();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="28-映射文件-select-resultMap-自定义结果映射规则"><a href="#28-映射文件-select-resultMap-自定义结果映射规则" class="headerlink" title="28.映射文件-select-resultMap-自定义结果映射规则"></a>28.映射文件-select-resultMap-自定义结果映射规则</h2><p>[EmployeeMapper.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmployeeMapper</span> </span>&#123;<br><br><span class="hljs-comment">//自定义结果映射规则</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Employee <span class="hljs-title">getEmpByIdWithResultMap</span><span class="hljs-params">(Integer id)</span></span>;<br>...<br></code></pre></td></tr></table></figure><hr><p>[EmployeeMapperPlus.xml]</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.atguigu.dao.EmployeeMapperPlus&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--自定义某个javaBean的封装规则</span><br><span class="hljs-comment">            type：自定义规则的Java类型</span><br><span class="hljs-comment">            id：唯一id方便引用</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.atguigu.bean.Employee&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;MyEmp&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--指定主键列的封装规则</span><br><span class="hljs-comment">                id定义主键会底层有优化</span><br><span class="hljs-comment">                column:指定哪一列</span><br><span class="hljs-comment">                property：指定对应的javaBean属性</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--定义普普通通列封装规则--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;last_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;lastName&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--其他不指定的列会自动封装，我们只要写resultMap就把全部的映射规则都写上--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--resultMap：自定义结果集映射规则--&gt;</span><br>    <span class="hljs-comment">&lt;!--public Employee getEmpById(Integer id);--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;MyEmp&quot;</span>&gt;</span><br>        select * from tb_employee where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><p>[EmployeeMapperPlusTest.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testResultMap</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>SqlSessionFactory ssf = Tools.getSqlSessionFactory(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>SqlSession session = ssf.openSession();<br><br><span class="hljs-keyword">try</span> &#123;<br>EmployeeMapper em = session.getMapper(EmployeeMapper.class);<br><br>System.out.println(em.getEmpByIdWithResultMap(<span class="hljs-number">1</span>));<br><br>session.commit();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>session.close();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><blockquote><p><font face="行楷" color=red><strong>如下代码均采用本人MyBatis项目。</strong></font></p></blockquote><h2 id="29-映射文件-select-resultMap-关联查询-环境搭建"><a href="#29-映射文件-select-resultMap-关联查询-环境搭建" class="headerlink" title="29.映射文件-select-resultMap-关联查询-环境搭建"></a>29.映射文件-select-resultMap-关联查询-环境搭建</h2><p>新建类[Department.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Department</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> Integer id;<br><span class="hljs-keyword">private</span> String departName;<br><span class="hljs-keyword">private</span> List&lt;Employee&gt; emps;<br><br><span class="hljs-comment">//getter and setter and toString()</span><br></code></pre></td></tr></table></figure><hr><p>修改类[Employee.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> </span>&#123;<br><br>...<br><span class="hljs-keyword">private</span> Department department;<br>...<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Employee</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><br><span class="hljs-comment">//add department&#x27;s getter and setter</span><br></code></pre></td></tr></table></figure><hr><p>创建数据库表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">CREATE TABLE <span class="hljs-title">department</span><span class="hljs-params">(</span></span><br><span class="hljs-function"><span class="hljs-params">id <span class="hljs-keyword">int</span>(<span class="hljs-number">11</span>)</span> primary key auto_increment,</span><br><span class="hljs-function">department_name <span class="hljs-title">varchar</span><span class="hljs-params">(<span class="hljs-number">255</span>)</span></span><br><span class="hljs-function">)</span>;<br><br><span class="hljs-function">ALTER TABLE employee ADD COLUMN department_id <span class="hljs-title">int</span><span class="hljs-params">(<span class="hljs-number">11</span>)</span></span>;<br><br>ALTER TABLE employee ADD CONSTRAINT fk_employee_department <br><span class="hljs-function">FOREIGN <span class="hljs-title">KEY</span><span class="hljs-params">(department_id)</span> REFERENCES <span class="hljs-title">department</span><span class="hljs-params">(id)</span></span>;<br><br><span class="hljs-function">INSERT INTO <span class="hljs-title">department</span><span class="hljs-params">(department_name)</span> <span class="hljs-title">values</span> <span class="hljs-params">(<span class="hljs-string">&#x27;开发部&#x27;</span>)</span></span>;<br><span class="hljs-function">INSERT INTO <span class="hljs-title">department</span><span class="hljs-params">(department_name)</span> <span class="hljs-title">values</span> <span class="hljs-params">(<span class="hljs-string">&#x27;测试部&#x27;</span>)</span></span>;<br></code></pre></td></tr></table></figure><h2 id="30-映射文件-select-resultMap-关联查询-级联属性封装结果"><a href="#30-映射文件-select-resultMap-关联查询-级联属性封装结果" class="headerlink" title="30.映射文件-select-resultMap-关联查询-级联属性封装结果"></a>30.映射文件-select-resultMap-关联查询-级联属性封装结果</h2><p>[EmployeeMapperPlus.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmployeeMapperPlus</span> </span>&#123;<br><br><span class="hljs-comment">//联合查询：级联属性封装结果集</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Employee <span class="hljs-title">getEmpAndDept</span><span class="hljs-params">(Integer id)</span></span>;<br>...<br></code></pre></td></tr></table></figure><hr><p>[EmployeeMapperPlus.xml]</p><blockquote><p><font face="微软雅黑" color=#00e>**注意：id=”MyEmpPlus” **</font></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.atguigu.dao.EmployeeMapperPlus&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">     场景一：</span><br><span class="hljs-comment">        查询Employee的同时查询员工对应的部门</span><br><span class="hljs-comment">        Employee===Department</span><br><span class="hljs-comment">        一个员工有与之对应的部门信息</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-comment">&lt;!--1、联合查询：级联属性封装结果集--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;MyEmpPlus&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.atguigu.bean.Employee&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;last_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;lastName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept.id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept.departName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    public Employee getEmpAndDept(Integer id);--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDept&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;MyEmpPlus&quot;</span>&gt;</span><br>        SELECT e.`id` id,e.`last_name` last_name,e.`email` email,e.`gender` gender,e.`d_id` d_id,d.`dept_name` dept_name,d.`id` did<br>        FROM tb_employee e JOIN tb_dept d<br>        ON e.`d_id` = d.`id` WHERE e.id=#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure><hr><p>[MyBatisMapperPlusTest.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test02</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();<br>        <span class="hljs-comment">//1、获取到的SqlSession不会自动提交数据</span><br>        SqlSession sqlSession = sqlSessionFactory.openSession();<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            EmployeeMapperPlus mapper = sqlSession.getMapper(EmployeeMapperPlus.class);<br><br>            Employee empAndDept = mapper.getEmpAndDept(<span class="hljs-number">1</span>);<br>            System.out.println(empAndDept);<br>            System.out.println(empAndDept.getDept());<br><br>            sqlSession.commit();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            sqlSession.close();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="31-映射文件-select-resultMap-关联查询-association定义关联对象封装规则"><a href="#31-映射文件-select-resultMap-关联查询-association定义关联对象封装规则" class="headerlink" title="31.映射文件-select-resultMap-关联查询-association定义关联对象封装规则"></a>31.映射文件-select-resultMap-关联查询-association定义关联对象封装规则</h2><p>[EmployeeMapperPlus.xml]</p><blockquote><p><font face="微软雅黑" color=#00e>**注意：id=”MyEmpPlus2” **</font></p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--<br>        <span class="hljs-number">2</span>、使用association定义关联的单个对象的封装规则<br>    --&gt;<br>    &lt;resultMap id=<span class="hljs-string">&quot;MyEmpPlus2&quot;</span> type=<span class="hljs-string">&quot;com.atguigu.bean.Employee&quot;</span>&gt;<br>        &lt;id column=<span class="hljs-string">&quot;id&quot;</span> property=<span class="hljs-string">&quot;id&quot;</span>/&gt;<br>        &lt;result column=&quot;last_name&quot; property=&quot;lastName&quot;&gt;&lt;/result&gt;<br>        &lt;result column=&quot;email&quot; property=&quot;email&quot;&gt;&lt;/result&gt;<br>        &lt;result column=&quot;gender&quot; property=&quot;gender&quot;&gt;&lt;/result&gt;<br>        &lt;!-- association 可以指定联合的javaBean对象<br>                property：指定哪个属性是联合的对象<br>                javaType：指定这个属性对象的类型【不能省略】<br>        --&gt;<br>        &lt;association property=<span class="hljs-string">&quot;dept&quot;</span> javaType=<span class="hljs-string">&quot;com.atguigu.bean.Department&quot;</span>&gt;<br>            &lt;id column=&quot;did&quot; property=&quot;id&quot;&gt;&lt;/id&gt;<br>            &lt;result column=&quot;dept_name&quot; property=&quot;departName&quot;&gt;&lt;/result&gt;<br>        &lt;/association&gt;<br>    &lt;/resultMap&gt;<br></code></pre></td></tr></table></figure><hr><p>[MyBatisMapperPlusTest.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Test01</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();<br>        <span class="hljs-comment">//1、获取到的SqlSession不会自动提交数据</span><br>        SqlSession sqlSession = sqlSessionFactory.openSession();<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            EmployeeMapperPlus mapper = sqlSession.getMapper(EmployeeMapperPlus.class);<br><br>            Employee empById = mapper.getEmpById(<span class="hljs-number">1</span>);<br>            System.out.println(empById);<br><br>            sqlSession.commit();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            sqlSession.close();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="32-映射文件-select-resultMap-关联查询-association分步查询"><a href="#32-映射文件-select-resultMap-关联查询-association分步查询" class="headerlink" title="32.映射文件-select-resultMap-关联查询-association分步查询"></a>32.映射文件-select-resultMap-关联查询-association分步查询</h2><p>[DepartmentMapper.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DepartmentMapper</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Department <span class="hljs-title">getDeptById</span><span class="hljs-params">(Integer id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>[DepartmentMapper.xml]</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;mapper namespace=<span class="hljs-string">&quot;com.atguigu.dao.DepartmentMapper&quot;</span>&gt;<br>    &lt;!--<span class="hljs-function"><span class="hljs-keyword">public</span> Department <span class="hljs-title">getDeptById</span><span class="hljs-params">(Integer id)</span></span>;--&gt;<br>    &lt;select id=<span class="hljs-string">&quot;getDeptById&quot;</span> resultType=<span class="hljs-string">&quot;com.atguigu.bean.Department&quot;</span>&gt;<br>        select id,dept_name departName from tb_dept where id = #&#123;id&#125;<br>    &lt;/select&gt;<br>&lt;/mapper&gt;<br></code></pre></td></tr></table></figure><hr><p>[mybatis-config.xml]</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- mapper：注册一个sql映射</span><br><span class="hljs-comment">                resource：引用类路径下的sql映射文件</span><br><span class="hljs-comment">                url：引用网络路径或者磁盘路径下的sql映射文件</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                注册接口</span><br><span class="hljs-comment">                class：引用（注册）接口</span><br><span class="hljs-comment">                    1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同意目录下；</span><br><span class="hljs-comment">                    2、没有sql映射文件，所有的sql都是利用注解写在接口上</span><br><span class="hljs-comment">                        推荐：比较重要的Dao接口写sql映射文件</span><br><span class="hljs-comment">                        不重要的，简单的Dao接口为了开发快速可以使用注解;</span><br><span class="hljs-comment">        --&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;mapper resource=&quot;UserMapper.xml&quot;/&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;mapper class=&quot;com.atguigu.dao.EmployeeMapperPlus&quot;&gt;&lt;/mapper&gt;--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.atguigu.dao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><p>[EmployeeMapperPlus.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmployeeMapperPlus</span> </span>&#123;<br><br><span class="hljs-comment">//association分步查询</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Employee <span class="hljs-title">getEmpByIdStep</span><span class="hljs-params">(Integer id)</span></span>;<br>...<br></code></pre></td></tr></table></figure><hr><p>[EmployeeMapperPlus.xml]</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--3、使用association进行分步查询</span><br><span class="hljs-comment">            ①先按照员工id查询员工信息</span><br><span class="hljs-comment">            ②根据查询员工信息中的department_id值去部门表查出部门信息</span><br><span class="hljs-comment">            ③部门设置到员工中；</span><br><span class="hljs-comment"> --&gt;</span><br> <span class="hljs-comment">&lt;!--  id  last_name  email   gender    d_id   --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.atguigu.bean.Employee&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;MyEmpByStep&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;last_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;lastName&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- association定义关联对象的封装规则</span><br><span class="hljs-comment">                select:表明当前属性是调用select指定的方法查出的结果</span><br><span class="hljs-comment">                column:指定将哪一列的值传给这个方法</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，并封装给property指定的属性</span><br><span class="hljs-comment">         --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.atguigu.dao.DepartmentMapper.getDeptById&quot;</span></span><br><span class="hljs-tag">                     <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;d_id&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  public Employee getEmpByIdStep(Integer id);--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByIdStep&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;MyEmpByStep&quot;</span>&gt;</span><br> select * from tb_employee where id=#&#123;id&#125;<br> <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><p>[MyBatisMapperPlusTest.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testResultMapAssociation3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();<br>        <span class="hljs-comment">//1、获取到的SqlSession不会自动提交数据</span><br>        SqlSession sqlSession = sqlSessionFactory.openSession();<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            EmployeeMapperPlus mapper = sqlSession.getMapper(EmployeeMapperPlus.class);<br><br>            Employee empByIdStep = mapper.getEmpByIdStep(<span class="hljs-number">1</span>);<br>            System.out.println(empByIdStep);<br>            System.out.println(empByIdStep.getDept());<br><br>            sqlSession.commit();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            sqlSession.close();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="33-映射文件-select-resultMap-关联查询-分步查询-amp-延迟加载"><a href="#33-映射文件-select-resultMap-关联查询-分步查询-amp-延迟加载" class="headerlink" title="33.映射文件-select-resultMap-关联查询-分步查询&amp;延迟加载"></a>33.映射文件-select-resultMap-关联查询-分步查询&amp;延迟加载</h2><p>我们每次查询Employee对象的时候，都将一起查询出来。部门信息在我们使用的时候再去查询；分段查询的基础之上加上两个配置：</p><p>在全局配置文件中配置，实现<strong>懒加载</strong></p><p>[mybatis-config.xml]</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>...<br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>...<br><span class="hljs-comment">&lt;!--显示的指定每个我们需要更改的配置的值，即使他是默认的。防止版本更新带来的问题  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadingEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;aggressiveLazyLoading&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>Setting</th><th>Description</th><th>Valid Values</th><th>Default</th></tr></thead><tbody><tr><td>lazyLoadingEnabled</td><td>Globally enables or disables lazy loading. When enabled, all relations will be lazily loaded. This value can be superseded for an specific relation by using the fetchType attribute on it.</td><td>true/false</td><td>false</td></tr><tr><td>aggressiveLazyLoading</td><td>When enabled, an object with lazy loaded properties will be loaded entirely upon a call to any of the lazy properties. Otherwise, each property is loaded on demand.</td><td>true/false</td><td>true</td></tr></tbody></table><blockquote><p>aggressive 英 [əˈɡresɪv] 美 [əˈɡresɪv]<br>adj. 好斗的;挑衅的;侵略的;富于攻击性的;气势汹汹的;声势浩大的;志在必得的</p></blockquote><p>PS. 个人认为aggressiveLazyLoading 可防止<strong>懒加载对象链</strong>情况出现。TODO: 待验证</p><h2 id="34-映射文件-select-resultMap-关联查询-collection定义关联集合封装规则"><a href="#34-映射文件-select-resultMap-关联查询-collection定义关联集合封装规则" class="headerlink" title="34.映射文件-select-resultMap-关联查询-collection定义关联集合封装规则"></a>34.映射文件-select-resultMap-关联查询-collection定义关联集合封装规则</h2><p>[DepartmentMapper.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DepartmentMapper</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Department <span class="hljs-title">getDeptByIdPlus</span><span class="hljs-params">(Integer id)</span></span>;<br>...<br></code></pre></td></tr></table></figure><hr><p>[DepartmentMapper.xml]</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--嵌套结果集的方式，使用collection标签定义关联的集合类型的属性封装规则  --&gt;</span><br>    <span class="hljs-comment">&lt;!--   did  dept_name ||  eid  last_name email  gender --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;MyDept&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.atguigu.bean.Department&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;departName&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            collection定义集合类型的属性的封装规则</span><br><span class="hljs-comment">              ofType:指定集合中元素的封装规则</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;emps&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;com.atguigu.bean.Employee&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;last_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;lastName&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-comment">&lt;!--    public Department getDeptByIdPlus(Integer id);--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptByIdPlus&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;MyDept&quot;</span>&gt;</span><br>        SELECT d.`id` did,d.`dept_name` dept_name,e.id eid,e.`last_name` last_name,e.`email` email,e.`gender` gender FROM tb_dept d<br>        LEFT JOIN tb_employee e ON d.`id` = e.`d_id` WHERE d.`id`=#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure><hr><p>[MyBatisMapperPlusTest.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetDeptByIdPlus</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();<br>        <span class="hljs-comment">//1、获取到的SqlSession不会自动提交数据</span><br>        SqlSession sqlSession = sqlSessionFactory.openSession();<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            DepartmentMapper mapper = sqlSession.getMapper(DepartmentMapper.class);<br><br>            Department department = mapper.getDeptByIdPlus(<span class="hljs-number">1</span>);<br>            System.out.println(department);<br>            System.out.println(department.getEmps());<br><br>            sqlSession.commit();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            sqlSession.close();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="35-映射文件-select-resultMap-关联查询-collection分步查询-amp-延迟加载"><a href="#35-映射文件-select-resultMap-关联查询-collection分步查询-amp-延迟加载" class="headerlink" title="35.映射文件-select-resultMap-关联查询-collection分步查询&amp;延迟加载"></a>35.映射文件-select-resultMap-关联查询-collection分步查询&amp;延迟加载</h2><p>[EmployeeMapperPlus.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmployeeMapperPlus</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Employee <span class="hljs-title">getEmpsByDeptId</span><span class="hljs-params">(Integer id)</span></span>;<br>...<br></code></pre></td></tr></table></figure><hr><p>[EmployeeMapperPlus.xml]</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--  <span class="hljs-function"><span class="hljs-keyword">public</span> Employee <span class="hljs-title">getEmpsByDeptId</span><span class="hljs-params">(Integer departmentId)</span></span>;--&gt;<br> &lt;select id=<span class="hljs-string">&quot;getEmpsByDeptId&quot;</span> resultType=<span class="hljs-string">&quot;com.atguigu.bean.Employee&quot;</span>&gt;<br>       select * from tb_employee where d_id = #&#123;deptId&#125;<br>   &lt;/select&gt;<br></code></pre></td></tr></table></figure><hr><p>[DepartmentMapper.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DepartmentMapper</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> Department <span class="hljs-title">getDeptByIdStep</span><span class="hljs-params">(Integer id)</span></span>;<br>...<br></code></pre></td></tr></table></figure><hr><p>[DepartmentMapper.xml]</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- collection：分段查询 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;MyDeptStep&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.atguigu.bean.Department&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;departName&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;emps&quot;</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.atguigu.dao.EmployeeMapperPlus.getEmpsByDeptId&quot;</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;&#123;deptId=id&#125;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-comment">&lt;!--    public Department getDeptByIdStep(Integer id);--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptByIdStep&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;MyDeptStep&quot;</span>&gt;</span><br>        select id,dept_name from tb_dept where id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><p>[MyBatisMapperPlusTest.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetDeptByIdStep</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();<br>        <span class="hljs-comment">//1、获取到的SqlSession不会自动提交数据</span><br>        SqlSession sqlSession = sqlSessionFactory.openSession();<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            DepartmentMapper mapper = sqlSession.getMapper(DepartmentMapper.class);<br><br>            Department deptByIdStep = mapper.getDeptByIdStep(<span class="hljs-number">1</span>);<br>            System.out.println(deptByIdStep.getEmps());<br><br>            sqlSession.commit();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            sqlSession.close();<br>        &#125;<br>    &#125;<br>...<br></code></pre></td></tr></table></figure><h2 id="36-映射文件-select-resultMap-分步查询传递多列值-amp-fetchType"><a href="#36-映射文件-select-resultMap-分步查询传递多列值-amp-fetchType" class="headerlink" title="36.映射文件-select-resultMap-分步查询传递多列值&amp;fetchType"></a>36.映射文件-select-resultMap-分步查询传递多列值&amp;fetchType</h2><p><font color="#ae0">扩展：</font></p><ul><li>多列的值传递过去：<ul><li>将多列的值封装map传递；<code>column=&quot;&#123;key1=column1,key2=column2&#125;&quot;</code></li></ul></li><li>fetchType=”lazy”：表示使用延迟加载；<ul><li>lazy：延迟</li><li>eager：立即</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.atguigu.bean.Department&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;MyDeptStep&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;department_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;departmentName&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;emps&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.atguigu.dao.EmployeeMapperPlus.getEmpsByDeptId&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">column</span>=<span class="hljs-string">&quot;&#123;deptId=id&#125;&quot;</span> <span class="hljs-attr">fetchType</span>=<span class="hljs-string">&quot;lazy&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-comment">&lt;!-- public Department getDeptByIdStep(Integer id); --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptByIdStep&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;MyDeptStep&quot;</span>&gt;</span><br>select id,department_name from department where id=#&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="37-映射文件-select-resultMap-discriminator鉴别器"><a href="#37-映射文件-select-resultMap-discriminator鉴别器" class="headerlink" title="37.映射文件-select-resultMap-discriminator鉴别器"></a>37.映射文件-select-resultMap-discriminator鉴别器</h2><p>[EmployeeMapperPlus.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmployeeMapperPlus</span> </span>&#123;<br><br><span class="hljs-comment">//带有鉴别器的</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Employee&gt; <span class="hljs-title">getEmpsWithDiscriminator</span><span class="hljs-params">()</span></span>;<br>...<br></code></pre></td></tr></table></figure><hr><p>[EmployeeMapperPlus.xml]</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- =======================鉴别器============================ --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;discriminator javaType=&quot;&quot;&gt;&lt;/discriminator&gt;</span><br><span class="hljs-comment">       鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为</span><br><span class="hljs-comment">       封装Employee：</span><br><span class="hljs-comment">           如果查出的是女生：就把部门信息查询出来，否则不查询；</span><br><span class="hljs-comment">           如果是男生，把last_name这一列的值赋值给email;</span><br><span class="hljs-comment">    --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.atguigu.bean.Employee&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;MyEmpDis&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;last_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;lastName&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span>/&gt;</span><br>       <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">           column：指定判定的列名</span><br><span class="hljs-comment">           javaType：列值对应的java类型  --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">discriminator</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;string&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span><br>           <span class="hljs-comment">&lt;!--女生  resultType:指定封装的结果类型；不能缺少。/resultMap--&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">case</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.bean.Employee&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span></span><br><span class="hljs-tag">                            <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.atguigu.dao.DepartmentMapper.getDeptById&quot;</span></span><br><span class="hljs-tag">                            <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;department_id&quot;</span> <span class="hljs-attr">fetchType</span>=<span class="hljs-string">&quot;eager&quot;</span> &gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">case</span>&gt;</span><br>           <span class="hljs-comment">&lt;!--男生 ;如果是男生，把last_name这一列的值赋值给email; --&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">case</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.bean.Employee&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;last_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;lastName&quot;</span>/&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;last_name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span>/&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;gender&quot;</span>/&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">case</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">discriminator</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!--  public Employee getEmpByIdStep(Integer id);--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpsWithDiscriminator&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;MyEmpDis&quot;</span>&gt;</span><br> select * from tb_employee limit 10<br> <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><p>[MyBatisMapperPlusTest.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetEmpsWithDiscriminator</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();<br>        <span class="hljs-comment">//1、获取到的SqlSession不会自动提交数据</span><br>        SqlSession sqlSession = sqlSessionFactory.openSession();<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            EmployeeMapperPlus mapper = sqlSession.getMapper(EmployeeMapperPlus.class);<br><br>            Employee empById = mapper.getEmpByIdStep(<span class="hljs-number">1</span>);<br>            System.out.println(empById.getDept());<br>            List&lt;Employee&gt; empsWithDiscriminator = mapper.getEmpsWithDiscriminator();<br>            System.out.println(empsWithDiscriminator);<br><br>            sqlSession.commit();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            sqlSession.close();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="38-动态sql-简介-amp-环境搭建"><a href="#38-动态sql-简介-amp-环境搭建" class="headerlink" title="38.动态sql-简介&amp;环境搭建"></a>38.动态sql-简介&amp;环境搭建</h2><ul><li>动态SQL是MyBatis强大特性之一。极大的简化我们拼装SQL的操作。</li><li>动态SQL元素和使用 JSTL 或其他类似基于 XML 的文本处理器相似。</li><li>MyBatis采用功能强大的基于 OGNL 的表达式来简化操作。<ul><li>if</li><li>choose (when, otherwise)</li><li>trim (where, set)</li><li>foreach</li></ul></li></ul><h2 id="39-动态sql-if-判断-amp-OGNL"><a href="#39-动态sql-if-判断-amp-OGNL" class="headerlink" title="39.动态sql-if-判断&amp;OGNL"></a>39.动态sql-if-判断&amp;OGNL</h2><p>[EmployeeMapperDynamicSQL.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmployeeMapperDynamicSQL</span> </span>&#123;<br><span class="hljs-comment">//携带了哪个字段查询条件就带上这个字段的值</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Employee&gt; <span class="hljs-title">getEmpsByConditionIf</span><span class="hljs-params">(Employee employee)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><hr><p>[EmployeeMapperDynamicSQL.xml.xml]</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.atguigu.dao.EmployeeMapperDynamicSQL&quot;</span>&gt;</span><br> <span class="hljs-comment">&lt;!-- 查询员工，要求，携带了哪个字段查询条件就带上这个字段的值 --&gt;</span><br> <span class="hljs-comment">&lt;!--    public List&lt;Employee&gt; getEmpsByConditionIf(Employee employee);--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpsByConditionIf&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.bean.Employee&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- test：判断表达式（OGNL）</span><br><span class="hljs-comment"> OGNL参照PPT或者官方文档。</span><br><span class="hljs-comment">    c:if  test</span><br><span class="hljs-comment"> 从参数中取值进行判断</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> 遇见特殊符号应该去写转义字符：</span><br><span class="hljs-comment"> &amp;&amp;：</span><br><span class="hljs-comment"> --&gt;</span><br>        select * from tb_employee<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;id!=null&quot;</span>&gt;</span><br>                id=#&#123;id&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;lastName!=null <span class="hljs-symbol">&amp;amp;</span><span class="hljs-symbol">&amp;amp;</span> lastName!=<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;quot;</span>&quot;</span>&gt;</span><br>                and last_name like #&#123;lastName&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email!=null <span class="hljs-symbol">&amp;amp;</span><span class="hljs-symbol">&amp;amp;</span> email.trim()!=<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;quot;</span>&quot;</span>&gt;</span><br>                and email=#&#123;email&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender==&#x27;男&#x27; or gender==&#x27;女&#x27;&quot;</span>&gt;</span><br>                and gender=#&#123;gender&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><p>[MybatisSQLTest.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisSQLTest</span> </span>&#123;<br><br><span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testIfSQL</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();<br>        SqlSession sqlSession = sqlSessionFactory.openSession();<br>        <span class="hljs-keyword">try</span> &#123;<br>            EmployeeMapperDynamicSQL mapper = sqlSession.getMapper(EmployeeMapperDynamicSQL.class);<br>            <span class="hljs-comment">//测试where/if</span><br>            List&lt;Employee&gt; emps = mapper.getEmpsByConditionIf(<span class="hljs-keyword">new</span> Employee(<span class="hljs-keyword">null</span>, <span class="hljs-string">&quot;%o%&quot;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>));<br>            <span class="hljs-keyword">for</span> (Employee emp : emps)&#123;<br>                System.out.println(emp);<br>            &#125;<br><br>            sqlSession.commit();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            sqlSession.close();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="OGNL"><a href="#OGNL" class="headerlink" title="OGNL"></a>OGNL</h3><p><a href="http://commons.apache.org/proper/commons-ognl/language-guide.html">OGNL官方文档</a></p><p>OGNL（ Object Graph Navigation Language ）对象图导航语言， 这是一种强大的表达式语言，通过它可以非常方便的来操作对象属性。 类似于我们的EL， SpEL等。</p><ul><li>访问对象属性： person.name</li><li>调用方法： person.getName()</li><li>调用静态属性/方法： @java.lang.Math@PI、@java.util.UUID@randomUUID()</li><li>调用构造方法： new com.lun.Person(‘admin’).name</li><li>运算符： +, -*, /, %</li><li>逻辑运算符： in, not in, &gt;, &gt;=, &lt;, &lt;=, ==, !=</li></ul><p><strong>注意</strong>： xml中特殊符号如”,&gt;,&lt;等这些都需要使用转义字符</p><p>访问集合伪属性：</p><table><thead><tr><th>类型</th><th>伪属性</th><th>伪属性对应的 Java 方法</th></tr></thead><tbody><tr><td>List、 Set、 Map</td><td>size、 isEmpty</td><td>List/Set/Map.size(),List/Set/Map.isEmpty()</td></tr><tr><td>List、 Set</td><td>iterator</td><td>List.iterator()、 Set.iterator()</td></tr><tr><td>Map</td><td>keys、 values</td><td>Map.keySet()、 Map.values()</td></tr><tr><td>Iterator</td><td>next、 hasNext</td><td>Iterator.next()、 Iterator.hasNext()</td></tr></tbody></table><h2 id="40-动态sql-where-查询条件"><a href="#40-动态sql-where-查询条件" class="headerlink" title="40.动态sql-where-查询条件"></a>40.动态sql-where-查询条件</h2><blockquote><p><font color="blue"><strong>查询的时候如果某些条件没带可能sql拼装会有问题</strong></font></p><ol><li>给where后面加上1=1，以后的条件都and xxx。</li><li>mybatis使用where标签来将所有的查询条件包括在内。mybatis就会将where标签中拼装的sql，多出来的and或者or去掉（where只会去掉第一个多出来的and或者or，但最后一个多出来的and或者or则不会去掉）。</li></ol></blockquote><p>[EmployeeMapperDynamicSQL.xml]</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpsByConditionIf&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.bean.Employee&quot;</span>&gt;</span><br>        select * from tb_employee<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;id!=null&quot;</span>&gt;</span><br>                id=#&#123;id&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;lastName!=null <span class="hljs-symbol">&amp;amp;</span><span class="hljs-symbol">&amp;amp;</span> lastName!=<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;quot;</span>&quot;</span>&gt;</span><br>                and last_name like #&#123;lastName&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email!=null <span class="hljs-symbol">&amp;amp;</span><span class="hljs-symbol">&amp;amp;</span> email.trim()!=<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;quot;</span>&quot;</span>&gt;</span><br>                and email=#&#123;email&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender==&#x27;男&#x27; or gender==&#x27;女&#x27;&quot;</span>&gt;</span><br>                and gender=#&#123;gender&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="41-动态sql-trim-自定义字符串截取"><a href="#41-动态sql-trim-自定义字符串截取" class="headerlink" title="41.动态sql-trim-自定义字符串截取"></a>41.动态sql-trim-自定义字符串截取</h2><p>后面多出的and或者or where标签不能解决</p><ul><li>prefix=””:前缀：trim标签体中是整个字符串拼串后的结果。<ul><li>prefix给拼串后的整个字符串加一个前缀</li></ul></li><li>prefixOverrides=””:<ul><li>前缀覆盖： 去掉整个字符串前面多余的字符</li></ul></li><li>suffix=””:后缀<ul><li>suffix给拼串后的整个字符串加一个后缀</li></ul></li><li>suffixOverrides=””<ul><li>后缀覆盖：去掉整个字符串后面多余的字符</li></ul></li></ul><p>[EmployeeMapperDynamicSQL.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmployeeMapperDynamicSQL</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Employee&gt; <span class="hljs-title">getEmpsByConditionTrim</span><span class="hljs-params">(Employee employee)</span></span>;<br>...<br></code></pre></td></tr></table></figure><hr><p>[EmployeeMapperDynamicSQL.xml]</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--        public List&lt;Employee&gt; getEmpsByConditionTrim(Employee employee);--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpsByConditionTrim&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.bean.Employee&quot;</span>&gt;</span><br>        select * from tb_employee<br>        <span class="hljs-comment">&lt;!-- 自定义字符串的截取规则</span><br><span class="hljs-comment">        prefix:前缀                   给拼串后的整个字符串加一个前缀</span><br><span class="hljs-comment">        prefixOverrides:前缀覆盖      去掉整个字符串前面多余的字符</span><br><span class="hljs-comment">        suffix:后缀                   给拼串后的整个字符串加一个后缀</span><br><span class="hljs-comment">        suffixOverrides:后缀覆盖      去掉整个字符串后面多余的字符</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;where&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;and&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;id!=null&quot;</span>&gt;</span><br>                id=#&#123;id&#125; and<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;lastName!=null <span class="hljs-symbol">&amp;amp;</span><span class="hljs-symbol">&amp;amp;</span> lastName!=<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;quot;</span>&quot;</span>&gt;</span><br>                last_name like #&#123;lastName&#125; and<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email!=null <span class="hljs-symbol">&amp;amp;</span><span class="hljs-symbol">&amp;amp;</span> email.trim()!=<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;quot;</span>&quot;</span>&gt;</span><br>                email=#&#123;email&#125; and<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender==&#x27;男&#x27; or gender==&#x27;女&#x27;&quot;</span>&gt;</span><br>                gender=#&#123;gender&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>...<br></code></pre></td></tr></table></figure><hr><p>[MybatisSQLTest.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testIfSQL</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();<br>        SqlSession sqlSession = sqlSessionFactory.openSession();<br>        <span class="hljs-keyword">try</span> &#123;<br>            EmployeeMapperDynamicSQL mapper = sqlSession.getMapper(EmployeeMapperDynamicSQL.class);<br>            <span class="hljs-comment">//测试Trim</span><br>            List&lt;Employee&gt; emps1 = mapper.getEmpsByConditionTrim(<span class="hljs-keyword">new</span> Employee(<span class="hljs-keyword">null</span>, <span class="hljs-string">&quot;%o%&quot;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>));<br>            <span class="hljs-keyword">for</span> (Employee emp1: emps1) &#123;<br>                System.out.println(emp1);<br>            &#125;<br><br>            sqlSession.commit();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            sqlSession.close();<br>        &#125;<br>    &#125;<br>...<br></code></pre></td></tr></table></figure><h2 id="42-动态sql-choose-分支选择"><a href="#42-动态sql-choose-分支选择" class="headerlink" title="42.动态sql-choose-分支选择"></a>42.动态sql-choose-分支选择</h2><p>[EmployeeMapperDynamicSQL.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmployeeMapperDynamicSQL</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Employee&gt; <span class="hljs-title">getEmpsByConditionChoose</span><span class="hljs-params">(Employee employee)</span></span>;<br>...<br></code></pre></td></tr></table></figure><hr><p>[EmployeeMapperDynamicSQL.xml]</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    public List&lt;Employee&gt; getEmpsByConditionChoose(Employee employee);--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpsByConditionChoose&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.bean.Employee&quot;</span>&gt;</span><br>        select * from tb_employee<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 如果带了id就用id查，如果带了lastName就用lastName查;只会进入其中一个 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;id!=null&quot;</span>&gt;</span><br>                    id=#&#123;id&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;lastName!=null <span class="hljs-symbol">&amp;amp;</span><span class="hljs-symbol">&amp;amp;</span> lastName!=<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;quot;</span>&quot;</span>&gt;</span><br>                    last_name like #&#123;lastName&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email!=null <span class="hljs-symbol">&amp;amp;</span><span class="hljs-symbol">&amp;amp;</span> email.trim()!=<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;quot;</span>&quot;</span>&gt;</span><br>                    email=#&#123;email&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span><br>                    gender=&#x27;男&#x27;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><p>[MybatisSQLTest.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testChooseSQL</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>       SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();<br>       SqlSession sqlSession = sqlSessionFactory.openSession();<br>       <span class="hljs-keyword">try</span> &#123;<br>           EmployeeMapperDynamicSQL mapper = sqlSession.getMapper(EmployeeMapperDynamicSQL.class);<br>           <span class="hljs-comment">//测试choose</span><br>           List&lt;Employee&gt; emps = mapper.getEmpsByConditionChoose(<span class="hljs-keyword">new</span> Employee(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>));<br>           <span class="hljs-keyword">for</span> (Employee emp : emps)&#123;<br>               System.out.println(emp);<br>           &#125;<br><br>           sqlSession.commit();<br>       &#125;<span class="hljs-keyword">finally</span> &#123;<br>           sqlSession.close();<br>       &#125;<br>   &#125;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="43-动态sql-set-与if结合的动态更新"><a href="#43-动态sql-set-与if结合的动态更新" class="headerlink" title="43.动态sql-set-与if结合的动态更新"></a>43.动态sql-set-与if结合的动态更新</h2><p>[EmployeeMapperDynamicSQL.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmployeeMapperDynamicSQL</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateEmp</span><span class="hljs-params">(Employee employee)</span></span>;<br></code></pre></td></tr></table></figure><hr><p>[EmployeeMapperDynamicSQL.xml]</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--        public void updateEmp(Employee employee);--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateEmp&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- Set标签的使用 --&gt;</span><br>        update tb_employee<br>        <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;lastName!=null&quot;</span>&gt;</span><br>                last_name=#&#123;lastName&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email!=null&quot;</span>&gt;</span><br>                email=#&#123;email&#125;,<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;gender!=null&quot;</span>&gt;</span><br>                gender=#&#123;gender&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>        where id=#&#123;id&#125;<br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">Trim：更新拼串</span><br><span class="hljs-comment">update tbl_employee </span><br><span class="hljs-comment">&lt;trim prefix=&quot;set&quot; suffixOverrides=&quot;,&quot;&gt;</span><br><span class="hljs-comment">&lt;if test=&quot;lastName!=null&quot;&gt;</span><br><span class="hljs-comment">last_name=#&#123;lastName&#125;,</span><br><span class="hljs-comment">&lt;/if&gt;</span><br><span class="hljs-comment">&lt;if test=&quot;email!=null&quot;&gt;</span><br><span class="hljs-comment">email=#&#123;email&#125;,</span><br><span class="hljs-comment">&lt;/if&gt;</span><br><span class="hljs-comment">&lt;if test=&quot;gender!=null&quot;&gt;</span><br><span class="hljs-comment">gender=#&#123;gender&#125;</span><br><span class="hljs-comment">&lt;/if&gt;</span><br><span class="hljs-comment">&lt;/trim&gt;</span><br><span class="hljs-comment">where id=#&#123;id&#125;  --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><p>[MybatisSQLTest.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSetSQL</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();<br>        SqlSession sqlSession = sqlSessionFactory.openSession();<br>        <span class="hljs-keyword">try</span> &#123;<br>            EmployeeMapperDynamicSQL mapper = sqlSession.getMapper(EmployeeMapperDynamicSQL.class);<br>            <span class="hljs-comment">//测试choose</span><br>            mapper.updateEmp(<span class="hljs-keyword">new</span> Employee(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>));<br><br>            sqlSession.commit();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            sqlSession.close();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="44-动态sql-foreach-遍历集合"><a href="#44-动态sql-foreach-遍历集合" class="headerlink" title="44.动态sql-foreach-遍历集合"></a>44.动态sql-foreach-遍历集合</h2><ul><li>collection：指定要遍历的集合：<ul><li>list类型的参数会特殊处理封装在map中，map的key就叫list</li></ul></li><li>item：将当前遍历出的元素赋值给指定的变量</li><li>separator:每个元素之间的分隔符</li><li>open：遍历出所有结果拼接一个开始的字符</li><li>close:遍历出所有结果拼接一个结束的字符</li><li>index:索引。遍历list的时候是index就是索引，item就是当前值<ul><li>遍历map的时候index表示的就是map的key，item就是map的值</li></ul></li><li><code>#&#123;变量名&#125;</code>就能取出变量的值也就是当前遍历出的元素</li></ul><p>[EmployeeMapperDynamicSQL.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmployeeMapperDynamicSQL</span> </span>&#123;<br><br><span class="hljs-comment">//查询员工id再给定的集合中</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Employee&gt; <span class="hljs-title">getEmpsByConditionForeach</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;ids&quot;)</span>List&lt;Integer&gt; ids)</span></span>;<br></code></pre></td></tr></table></figure><hr><p>[EmployeeMapperDynamicSQL.xml]</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    public List&lt;Employee&gt; getEmpsByConditionForeach(@Param(&quot;ids&quot;)List&lt;Integer&gt; ids);--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpsByConditionForeach&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.bean.Employee&quot;</span>&gt;</span><br>        select * from tb_employee where id in<br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">            collection：指定要遍历的集合：</span><br><span class="hljs-comment">                    list类型的参数会特殊处理封装在map中，map的key就叫list</span><br><span class="hljs-comment">            item：将当前遍历出的元素赋值给指定的变量</span><br><span class="hljs-comment">            separator:每个元素之间的分隔符</span><br><span class="hljs-comment">            open：遍历出所有结果拼接一个开始的字符</span><br><span class="hljs-comment">            close:遍历出所有结果拼接一个结束的字符</span><br><span class="hljs-comment">            index:索引。遍历list的时候是index就是索引，item就是当前值</span><br><span class="hljs-comment">                        遍历map的时候index表示的就是map的key，item就是map的值</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            #&#123;变量名&#125;就能取出变量的值也就是当前遍历出的元素</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;ids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;item_id&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span><br>            #&#123;item_id&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><p>[MybatisSQLTest.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testForeach</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();<br>        SqlSession sqlSession = sqlSessionFactory.openSession();<br>        <span class="hljs-keyword">try</span> &#123;<br>            EmployeeMapperDynamicSQL mapper = sqlSession.getMapper(EmployeeMapperDynamicSQL.class);<br>            <span class="hljs-comment">//测试choose</span><br>            List&lt;Employee&gt; list = mapper.getEmpsByConditionForeach(Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>));<br>            <span class="hljs-keyword">for</span> (Employee emp : list) &#123;<br>                System.out.println(emp);<br>            &#125;<br><br>            sqlSession.commit();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            sqlSession.close();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="45-动态sql-foreach-mysql下foreach批量插入的两种方式"><a href="#45-动态sql-foreach-mysql下foreach批量插入的两种方式" class="headerlink" title="45.动态sql-foreach-mysql下foreach批量插入的两种方式"></a>45.动态sql-foreach-mysql下foreach批量插入的两种方式</h2><p>[EmployeeMapperDynamicSQL.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EmployeeMapperDynamicSQL</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addEmps</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;emps&quot;)</span>List&lt;Employee&gt; emps)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addEmps2</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;emps&quot;)</span>List&lt;Employee&gt; emps)</span></span>;<br><br></code></pre></td></tr></table></figure><hr><p>[EmployeeMapperDynamicSQL.xml]</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br> <span class="hljs-comment">&lt;!-- 批量保存 --&gt;</span><br> <span class="hljs-comment">&lt;!--public void addEmps(@Param(&quot;emps&quot;)List&lt;Employee&gt; emps);  --&gt;</span><br> <span class="hljs-comment">&lt;!--MySQL下批量保存：可以foreach遍历   mysql支持values(),(),()语法--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addEmps&quot;</span>&gt;</span><br>       insert into tb_employee (last_name,email,gender,d_id)<br>       values<br>       <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;emps&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>           (#&#123;emp.lastName&#125;,#&#123;emp.email&#125;,#&#123;emp.gender&#125;,#&#123;emp.dept.id&#125;)<br>       <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br> <br> <span class="hljs-comment">&lt;!-- 这种方式需要数据库连接属性allowMultiQueries=true；</span><br><span class="hljs-comment"> 这种分号分隔多个sql可以用于其他的批量操作（删除，修改） --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addEmps2&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;emps&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;;&quot;</span>&gt;</span><br> insert into employee(last_name,email,gender,d_id)<br> values(#&#123;emp.lastName&#125;,#&#123;emp.email&#125;,#&#123;emp.gender&#125;,#&#123;emp.depart.id&#125;)<br> <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong>，MySQL数据库连接属性allowMultiQueries=true，才能批量删除，修改数据。（在连接MySQL的URL后添加参数）。</p><hr><p>[MybatisSQLTest.java]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testForeachInsert1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>       SqlSessionFactory sqlSessionFactory = getSqlSessionFactory();<br>       SqlSession sqlSession = sqlSessionFactory.openSession();<br>       <span class="hljs-keyword">try</span> &#123;<br>           EmployeeMapperDynamicSQL mapper = sqlSession.getMapper(EmployeeMapperDynamicSQL.class);<br>           <span class="hljs-comment">//测试choose</span><br>           List&lt;Employee&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>           list.add(<span class="hljs-keyword">new</span> Employee(<span class="hljs-keyword">null</span>,<span class="hljs-string">&quot;Liu&quot;</span>, <span class="hljs-string">&quot;liu@qq.com&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>));<br>           mapper.addEmps(list);<br><br>           sqlSession.commit();<br>       &#125;<span class="hljs-keyword">finally</span> &#123;<br>           sqlSession.close();<br>       &#125;<br>   &#125;<br><br></code></pre></td></tr></table></figure><h2 id="Oracle还需持续学习"><a href="#Oracle还需持续学习" class="headerlink" title="Oracle还需持续学习"></a><font color="green">Oracle还需持续学习</font></h2><h3 id="46-动态sql-foreach-oracle下批量插入的两种方式"><a href="#46-动态sql-foreach-oracle下批量插入的两种方式" class="headerlink" title="46.动态sql-foreach-oracle下批量插入的两种方式"></a>46.动态sql-foreach-oracle下批量插入的两种方式</h3><p>Oracle数据库批量保存：</p><ul><li>Oracle不支持values(),(),()</li></ul><p>Oracle支持的批量方式:</p><ol><li>多个insert放在begin - end里面</li><li>利用中间表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 多个<span class="hljs-keyword">insert</span>放在<span class="hljs-keyword">begin</span> <span class="hljs-operator">-</span> <span class="hljs-keyword">end</span>里面<br><span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> employees(employee_id,last_name,email) <br>    <span class="hljs-keyword">values</span>(employees_seq.nextval,<span class="hljs-string">&#x27;test_001&#x27;</span>,<span class="hljs-string">&#x27;test_001@atguigu.com&#x27;</span>);<br>    <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> employees(employee_id,last_name,email) <br>    <span class="hljs-keyword">values</span>(employees_seq.nextval,<span class="hljs-string">&#x27;test_002&#x27;</span>,<span class="hljs-string">&#x27;test_002@atguigu.com&#x27;</span>);<br><span class="hljs-keyword">end</span>;<br><br># 利用中间表<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> employees(employee_id,last_name,email)<br>   <span class="hljs-keyword">select</span> employees_seq.nextval,lastName,email <span class="hljs-keyword">from</span>(<br>          <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;test_a_01&#x27;</span> lastName,<span class="hljs-string">&#x27;test_a_e01&#x27;</span> email <span class="hljs-keyword">from</span> dual<br>          <span class="hljs-keyword">union</span><br>          <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;test_a_02&#x27;</span> lastName,<span class="hljs-string">&#x27;test_a_e02&#x27;</span> email <span class="hljs-keyword">from</span> dual<br>          <span class="hljs-keyword">union</span><br>          <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;test_a_03&#x27;</span> lastName,<span class="hljs-string">&#x27;test_a_e03&#x27;</span> email <span class="hljs-keyword">from</span> dual<br>   );<br></code></pre></td></tr></table></figure><h3 id="47-动态sql-foreach-oracle下foreach批量保存两种方式"><a href="#47-动态sql-foreach-oracle下foreach批量保存两种方式" class="headerlink" title="47.动态sql-foreach-oracle下foreach批量保存两种方式"></a>47.动态sql-foreach-oracle下foreach批量保存两种方式</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addEmps&quot;</span> <span class="hljs-attr">databaseId</span>=<span class="hljs-string">&quot;oracle&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!-- oracle第一种批量方式 --&gt;</span></span><br><span class="xml"><span class="hljs-comment">&lt;!--</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;emps&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;begin&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;end;&quot;</span>&gt;</span></span><br><span class="xml">insert into employees(employee_id,last_name,email) </span><br><span class="xml">    values(employees_seq.nextval,#</span><span class="hljs-template-variable">&#123;emp.lastName&#125;</span><span class="xml">,#</span><span class="hljs-template-variable">&#123;emp.email&#125;</span><span class="xml">);</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span> </span><br><span class="xml">--&gt;</span><br><span class="xml"></span><br><span class="xml"><span class="hljs-comment">&lt;!-- oracle第二种批量方式  --&gt;</span></span><br><span class="xml">insert into employees(employee_id,last_name,email)</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;emps&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;union&quot;</span></span></span><br><span class="xml">open=&quot;select employees_seq.nextval,lastName,email from(&quot;</span><br><span class="xml">close=&quot;)&quot;&gt;</span><br><span class="xml">select #</span><span class="hljs-template-variable">&#123;emp.lastName&#125;</span><span class="xml"> lastName,#</span><span class="hljs-template-variable">&#123;emp.email&#125;</span><span class="xml"> email from dual</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="48-动态sql-内置参数-parameter-amp-databaseId"><a href="#48-动态sql-内置参数-parameter-amp-databaseId" class="headerlink" title="48.动态sql-内置参数 _parameter &amp; _databaseId"></a>48.动态sql-内置参数 _parameter &amp; _databaseId</h3><p>不只是方法传递过来的参数可以被用来判断，</p><p>mybatis默认还有<strong>两个内置参数</strong>：</p><ol><li><p>_parameter</p><p>:代表整个参数</p><ul><li>单个参数：_parameter就是这个参数</li><li>多个参数：参数会被封装为一个map；_parameter就是代表这个map</li></ul></li><li><p>_databaseId</p><p>:如果配置了databaseIdProvider标签。</p><ul><li>_databaseId就是代表当前数据库的别名oracle</li></ul></li></ol><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-comment">&lt;!--public List&lt;Employee&gt; getEmpsTestInnerParameter(Employee employee);  --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpsTestInnerParameter&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.lun.c01.helloworld.bean.Employee&quot;</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;_databaseId==&#x27;mysql&#x27;&quot;</span>&gt;</span></span><br><span class="xml">select * from tbl_employee</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;_parameter!=null&quot;</span>&gt;</span></span><br><span class="xml">where last_name like #</span><span class="hljs-template-variable">&#123;_parameter.lastName&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;_databaseId==&#x27;oracle&#x27;&quot;</span>&gt;</span></span><br><span class="xml">select * from employees</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;_parameter!=null&quot;</span>&gt;</span></span><br><span class="xml">where last_name like #</span><span class="hljs-template-variable">&#123;_parameter.lastName&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="49-动态sql-bind-绑定"><a href="#49-动态sql-bind-绑定" class="headerlink" title="49.动态sql-bind-绑定"></a>49.动态sql-bind-绑定</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-comment">&lt;!--public List&lt;Employee&gt; getEmpsTestInnerParameter(Employee employee);  --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpsTestInnerParameter&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.atguigu.mybatis.bean.Employee&quot;</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-comment">&lt;!-- bind：可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值 --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">bind</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lastName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#x27;%&#x27;+lastName+&#x27;%&#x27;&quot;</span>/&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;_databaseId==&#x27;mysql&#x27;&quot;</span>&gt;</span></span><br><span class="xml">select * from tbl_employee</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;_parameter!=null&quot;</span>&gt;</span></span><br><span class="xml">where last_name like #</span><span class="hljs-template-variable">&#123;lastName&#125;</span><span class="xml"><span class="hljs-comment">&lt;!-- 这里使用到lastName --&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;_databaseId==&#x27;oracle&#x27;&quot;</span>&gt;</span></span><br><span class="xml">select * from employees</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;_parameter!=null&quot;</span>&gt;</span></span><br><span class="xml">where last_name like #</span><span class="hljs-template-variable">&#123;_parameter.lastName&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="50-动态sql-sql-抽取可重用的sql片段"><a href="#50-动态sql-sql-抽取可重用的sql片段" class="headerlink" title="50.动态sql-sql-抽取可重用的sql片段"></a>50.动态sql-sql-抽取可重用的sql片段</h3><p>抽取可重用的sql片段。方便后面引用：</p><ol><li>sql抽取：经常将要查询的列名，或者插入用的列名抽取出来方便引用</li><li>include来引用已经抽取的sql：</li><li>include还可以自定义一些property，sql标签内部就能使用自定义的属性<ul><li>include-property：取值的正确方式${prop},</li><li>不能使用<code>#&#123;&#125;</code>，而使用<code>$&#123;&#125;</code></li></ul></li></ol><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userColumns&quot;</span>&gt;</span> $</span><span class="hljs-template-variable">&#123;alias&#125;</span><span class="xml">.id,$</span><span class="hljs-template-variable">&#123;alias&#125;</span><span class="xml">.username,$</span><span class="hljs-template-variable">&#123;alias&#125;</span><span class="xml">.password <span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUsers&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span></span><br><span class="xml">select</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;userColumns&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;alias&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;t1&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>,</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;userColumns&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;alias&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;t2&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span></span><br><span class="xml">from some_table t1</span><br><span class="xml">cross join some_table t2</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertColumn&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;_databaseId==&#x27;oracle&#x27;&quot;</span>&gt;</span></span><br><span class="xml">employee_id,last_name,email</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;_databaseId==&#x27;mysql&#x27;&quot;</span>&gt;</span></span><br><span class="xml">last_name,email,gender,d_id</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span></span><br><br><span class="xml">...</span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addEmps&quot;</span>&gt;</span></span><br><span class="xml">insert into tbl_employee(</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;insertColumn&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><span class="hljs-comment">&lt;!-- 使用地方 --&gt;</span></span><br><span class="xml">) </span><br><span class="xml">values</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;emps&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;emp&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span></span><br><span class="xml">(#</span><span class="hljs-template-variable">&#123;emp.lastName&#125;</span><span class="xml">,#</span><span class="hljs-template-variable">&#123;emp.email&#125;</span><span class="xml">,#</span><span class="hljs-template-variable">&#123;emp.gender&#125;</span><span class="xml">,#</span><span class="hljs-template-variable">&#123;emp.dept.id&#125;</span><span class="xml">)</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span></span><br><span class="xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="51-缓存-缓存介绍"><a href="#51-缓存-缓存介绍" class="headerlink" title="51.缓存-缓存介绍"></a>51.缓存-缓存介绍</h2><p><a href="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html#cache">MyBatis官方文档</a></p><p>MyBatis 包含一个非常强大的查询缓存特性，它可以非常方便地配置和定制。缓存可以极大的提升查询效率。</p><p>MyBatis系统中默认定义了两级缓存，一级缓存和二级缓存。</p><ol><li>默认情况下，只有一级缓存（ SqlSession级别的缓存，也称为本地缓存）开启。</li><li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</li><li>为了提高扩展性。 MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</li></ol><h2 id="52-缓存-一级缓存体验"><a href="#52-缓存-一级缓存体验" class="headerlink" title="52.缓存-一级缓存体验"></a>52.缓存-一级缓存体验</h2><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><ul><li>一级缓存(local cache)，即本地缓存，作用域默认为sqlSession。当 Session flush 或 close 后, 该Session 中的所有 Cache 将被清空。</li><li>本地缓存不能被关闭, 但可以调用 clearCache() 来清空本地缓存, 或者改变缓存的作用域.</li><li>在mybatis3.1之后, 可以配置本地缓存的作用域. 在 mybatis.xml 中配置</li></ul><table><thead><tr><th>-</th><th>-</th><th>-</th><th>-</th></tr></thead><tbody><tr><td>localCacheScope</td><td>MyBatis uses local cache to prevent circular references and speed up repeated nested queries. By default (SESSION) all queries executed during a session are cached. If localCacheScope=STATEMENT local session will be used just for statement execution, no data will be shared between two different calls to the same SqlSession.</td><td>SESSION/STATEMENT</td><td>SESSION</td></tr></tbody></table><h3 id="一级缓存体验"><a href="#一级缓存体验" class="headerlink" title="一级缓存体验"></a>一级缓存体验</h3><p><a href="https://gitee.com/jallenkwong/LearnMyBatis/blob/master/src/test/java/com/lun/c05/cache/CacheTest.java">CacheTest.java</a></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> CacheTest &#123;<br><br>@Test<br>public void test<span class="hljs-constructor">FirstCache()</span> throws IOException &#123;<br>SqlSessionFactory ssf = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Tools</span>.</span></span>get<span class="hljs-constructor">SqlSessionFactory(<span class="hljs-string">&quot;c03/mybatis-config.xml&quot;</span>)</span>;<br>SqlSession session = ssf.<span class="hljs-keyword">open</span><span class="hljs-constructor">Session()</span>;<br><br><span class="hljs-keyword">try</span> &#123;<br>EmployeeMapper em = session.get<span class="hljs-constructor">Mapper(EmployeeMapper.<span class="hljs-params">class</span>)</span>;<br><br>Employee e1 = em.get<span class="hljs-constructor">EmpById(1)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(e1);<br><br>Employee e2 = em.get<span class="hljs-constructor">EmpById(1)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(e2);<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;e1 == e2 : &quot;</span> + (e1<span class="hljs-operator"> == </span>e2));<br><br>session.commit<span class="hljs-literal">()</span>;<br>&#125; finally &#123;<br>session.close<span class="hljs-literal">()</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">DEBUG</span> <span class="hljs-number">08</span>-<span class="hljs-number">02</span> <span class="hljs-number">22</span>:<span class="hljs-number">50</span>:<span class="hljs-number">35</span>,<span class="hljs-number">092</span> ==&gt;  Preparing: select * from employee where id = ?   (BaseJdbcLogger.java:<span class="hljs-number">145</span>) <br><span class="hljs-attribute">DEBUG</span> <span class="hljs-number">08</span>-<span class="hljs-number">02</span> <span class="hljs-number">22</span>:<span class="hljs-number">50</span>:<span class="hljs-number">35</span>,<span class="hljs-number">192</span> ==&gt; Parameters: <span class="hljs-number">1</span>(Integer)  (BaseJdbcLogger.java:<span class="hljs-number">145</span>) <br><span class="hljs-attribute">DEBUG</span> <span class="hljs-number">08</span>-<span class="hljs-number">02</span> <span class="hljs-number">22</span>:<span class="hljs-number">50</span>:<span class="hljs-number">35</span>,<span class="hljs-number">260</span> &lt;==      Total: <span class="hljs-number">1</span>  (BaseJdbcLogger.java:<span class="hljs-number">145</span>) <br><span class="hljs-attribute">Employee</span><span class="hljs-meta"> [id=1, lastName=jallen2, email=jallen@good.com, gender=1, department=null]</span><br><span class="hljs-attribute">Employee</span><span class="hljs-meta"> [id=1, lastName=jallen2, email=jallen@good.com, gender=1, department=null]</span><br><span class="hljs-attribute">e1</span> == e<span class="hljs-number">2</span> : true &lt;-------------e<span class="hljs-number">1</span>和e<span class="hljs-number">2</span>指向相同的对象<br></code></pre></td></tr></table></figure><h2 id="53-缓存-一级缓存失效的四种情况"><a href="#53-缓存-一级缓存失效的四种情况" class="headerlink" title="53.缓存-一级缓存失效的四种情况"></a>53.缓存-一级缓存失效的四种情况</h2><p>同一次会话期间只要查询过的数据都会保存在当前SqlSession的一个Map中</p><ul><li>key = hashCode + 查询的SqlId + 编写的sql查询语句 + 参数</li></ul><p>一级缓存失效的四种情况：</p><ol><li>不同的SqlSession对应不同的一级缓存</li><li>同一个SqlSession但是查询条件不同</li><li>同一个SqlSession两次查询期间执行了任何一次<strong>增删改</strong>操作</li><li>同一个SqlSession两次查询期间手动清空了缓存</li></ol><h2 id="54-缓存-二级缓存介绍"><a href="#54-缓存-二级缓存介绍" class="headerlink" title="54.缓存-二级缓存介绍"></a>54.缓存-二级缓存介绍</h2><ul><li>二级缓存(second level cache)，全局作用域缓存</li><li>二级缓存默认不开启，需要手动配置</li><li>MyBatis提供二级缓存的接口以及实现，缓存实现要求 POJO实现Serializable接口</li><li>二级缓存在 SqlSession 关闭或提交之后才会生效</li><li>使用步骤<ol><li>全局配置文件中开启二级缓存<ul><li><code>&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</code></li></ul></li><li>需要使用二级缓存的映射文件处使用cache配置缓存<ul><li><code>&lt;cache /&gt;</code></li></ul></li><li><strong>注意</strong>： POJO需要实现Serializable接口</li></ol></li></ul><p>cache标签的属性：</p><ul><li>eviction:缓存的回收策略：<ul><li>LRU – 最近最少使用的：移除最长时间不被使用的对象。</li><li>FIFO – 先进先出：按对象进入缓存的顺序来移除它们。</li><li>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。</li><li>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</li><li>默认的是 LRU。</li></ul></li><li>flushInterval：缓存刷新间隔<ul><li>缓存多长时间清空一次，默认不清空，设置一个毫秒值</li></ul></li><li>readOnly:是否只读：<ul><li>true：只读；mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户。不安全，速度快</li><li>false：非只读：mybatis觉得获取的数据可能会被修改。mybatis会利用序列化&amp;反序列的技术克隆一份新的数据给你。安全，速度慢</li></ul></li><li>size：缓存存放多少元素；</li><li>type=””：指定自定义缓存的全类名；<ul><li>实现Cache接口即可；</li></ul></li></ul><h2 id="55-缓存-二级缓存使用-amp-细节"><a href="#55-缓存-二级缓存使用-amp-细节" class="headerlink" title="55.缓存-二级缓存使用&amp;细节"></a>55.缓存-二级缓存使用&amp;细节</h2><p>使用步骤:</p><ol><li>全局配置文件中开启二级缓存<ul><li><code>&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</code></li></ul></li><li>需要使用二级缓存的映射文件处使用cache配置缓存<ul><li><code>&lt;cache /&gt;</code></li></ul></li><li><strong>注意</strong>： POJO需要实现Serializable接口</li></ol><p><a href="https://gitee.com/jallenkwong/LearnMyBatis/blob/master/src/main/resources/c05/mybatis-config.xml">mybatis-config.xml</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><hr><p><a href="https://gitee.com/jallenkwong/LearnMyBatis/blob/master/src/main/java/com/lun/c01/helloworld/bean/Employee.java">Employee.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = -<span class="hljs-number">7390587151857533202L</span>;<br></code></pre></td></tr></table></figure><hr><p><a href="https://gitee.com/jallenkwong/LearnMyBatis/blob/master/src/main/resources/c05/EmployeeMapper.xml">EmployeeMapper.xml</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;mapper <span class="hljs-attribute">namespace</span>=<span class="hljs-string">&quot;com.lun.c03.mapper.dao.EmployeeMapper&quot;</span>&gt;<br><br>&lt;cache <span class="hljs-attribute">eviction</span>=<span class="hljs-string">&quot;FIFO&quot;</span> <span class="hljs-attribute">flushInterval</span>=<span class="hljs-string">&quot;60000&quot;</span> <span class="hljs-attribute">readOnly</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attribute">size</span>=<span class="hljs-string">&quot;1024&quot;</span>&gt;&lt;/cache&gt;<br></code></pre></td></tr></table></figure><hr><p><a href="https://gitee.com/jallenkwong/LearnMyBatis/blob/master/src/test/java/com/lun/c05/cache/CacheTest.java">CacheTest.java</a></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> CacheTest &#123;<br><br>@Test<br>public void test<span class="hljs-constructor">SecondCache()</span> throws IOException &#123;<br>SqlSessionFactory ssf = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Tools</span>.</span></span>get<span class="hljs-constructor">SqlSessionFactory(<span class="hljs-string">&quot;c05/mybatis-config.xml&quot;</span>)</span>;<br>SqlSession session = ssf.<span class="hljs-keyword">open</span><span class="hljs-constructor">Session()</span>;<br>SqlSession session2 = ssf.<span class="hljs-keyword">open</span><span class="hljs-constructor">Session()</span>;<br><br><span class="hljs-keyword">try</span> &#123;<br>EmployeeMapper em = session.get<span class="hljs-constructor">Mapper(EmployeeMapper.<span class="hljs-params">class</span>)</span>;<br>Employee e1 = em.get<span class="hljs-constructor">EmpById(1)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(e1);<br>session.close<span class="hljs-literal">()</span>;<br><br>EmployeeMapper em2 = session2.get<span class="hljs-constructor">Mapper(EmployeeMapper.<span class="hljs-params">class</span>)</span>;<br>Employee e2 = em2.get<span class="hljs-constructor">EmpById(1)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(e2);<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;e1 == e2 : &quot;</span> + (e1<span class="hljs-operator"> == </span>e2));<br><br>&#125; finally &#123;<br>session2.close<span class="hljs-literal">()</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">DEBUG</span> 08-03 01:13:02,575 Cache Hit Ratio [com.lun.c03.mapper.dao.EmployeeMapper]: 0.0  (LoggingCache.java:62) <br><span class="hljs-builtin-name">DEBUG</span> 08-03 01:13:03,945 ==&gt;  Preparing: select * <span class="hljs-keyword">from</span> employee where id = ?   (BaseJdbcLogger.java:145) <br><span class="hljs-builtin-name">DEBUG</span> 08-03 01:13:04,081 ==&gt; Parameters: 1(Integer)  (BaseJdbcLogger.java:145) <br><span class="hljs-builtin-name">DEBUG</span> 08-03 01:13:04,186 &lt;==      Total: 1  (BaseJdbcLogger.java:145) <br>Employee [<span class="hljs-attribute">id</span>=1, <span class="hljs-attribute">lastName</span>=jallen2, <span class="hljs-attribute">email</span>=jallen@good.com, <span class="hljs-attribute">gender</span>=1, <span class="hljs-attribute">department</span>=<span class="hljs-literal">null</span>]<br><span class="hljs-builtin-name">DEBUG</span> 08-03 01:13:04,218 Cache Hit Ratio [com.lun.c03.mapper.dao.EmployeeMapper]: 0.5  (LoggingCache.java:62) <br>Employee [<span class="hljs-attribute">id</span>=1, <span class="hljs-attribute">lastName</span>=jallen2, <span class="hljs-attribute">email</span>=jallen@good.com, <span class="hljs-attribute">gender</span>=1, <span class="hljs-attribute">department</span>=<span class="hljs-literal">null</span>]<br>e1 == e2 : <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h2 id="56-缓存-缓存有关的设置以及属性"><a href="#56-缓存-缓存有关的设置以及属性" class="headerlink" title="56.缓存-缓存有关的设置以及属性"></a>56.缓存-缓存有关的设置以及属性</h2><ol><li>全局setting的cacheEnable： – 配置二级缓存的开关。一级缓存一直是打开的。</li><li>select标签的useCache属性： – 配置这个select是否使用二级缓存。一级缓存一直是使用的</li><li>每个增删改标签的flushCache属性： – 增删改默认flushCache=true。sql执行以后，会同时清空一级和二级缓存。查询默认flushCache=false。</li><li>sqlSession.clearCache()： – 只是用来清除一级缓存。</li><li>全局setting的localCacheScope：本地缓存作用域：（一级缓存SESSION），当前会话的所有数据保存在会话缓存中；STATEMENT：可以禁用一级缓存。</li></ol><h2 id="57-缓存-缓存原理图示"><a href="#57-缓存-缓存原理图示" class="headerlink" title="57.缓存-缓存原理图示"></a>57.缓存-缓存原理图示</h2><p><img src="https://gitee.com/jallenkwong/LearnMyBatis/raw/master/image/04.png" alt="img"></p><h2 id="58-缓存-第三方缓存整合原理-amp-ehcache适配包下载"><a href="#58-缓存-第三方缓存整合原理-amp-ehcache适配包下载" class="headerlink" title="58.缓存-第三方缓存整合原理&amp;ehcache适配包下载"></a>58.缓存-第三方缓存整合原理&amp;ehcache适配包下载</h2><ul><li>EhCache 是一个纯Java的进程内缓存框架，具有快速、精干等特点，是Hibernate中默认的CacheProvider。</li><li>MyBatis定义了Cache接口方便我们进行自定义扩展。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.apache.ibatis.cache;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReadWriteLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Cache</span> </span>&#123;<br><br>  <span class="hljs-function">String <span class="hljs-title">getId</span><span class="hljs-params">()</span></span>;<br><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">putObject</span><span class="hljs-params">(Object key, Object value)</span></span>;<br><br>  <span class="hljs-function">Object <span class="hljs-title">getObject</span><span class="hljs-params">(Object key)</span></span>;<br><br>  <span class="hljs-function">Object <span class="hljs-title">removeObject</span><span class="hljs-params">(Object key)</span></span>;<br><br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span>;<br><br>  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getSize</span><span class="hljs-params">()</span></span>;<br>  <br>  <span class="hljs-function">ReadWriteLock <span class="hljs-title">getReadWriteLock</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="59-缓存-MyBatis整合ehcache-amp-总结"><a href="#59-缓存-MyBatis整合ehcache-amp-总结" class="headerlink" title="59.缓存-MyBatis整合ehcache&amp;总结"></a>59.缓存-MyBatis整合ehcache&amp;总结</h2><p>步骤：</p><ul><li>加入mybatis-ehcache依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.caches<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>编写<a href="https://gitee.com/jallenkwong/LearnMyBatis/blob/master/src/main/resources/ehcache.xml">ehcache.xml</a>配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ehcache</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"> <span class="hljs-attr">xsi:noNamespaceSchemaLocation</span>=<span class="hljs-string">&quot;../config/ehcache.xsd&quot;</span>&gt;</span><br> <span class="hljs-comment">&lt;!-- 磁盘保存路径 --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">diskStore</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;C:\\ehcache&quot;</span> /&gt;</span><br> <br> <span class="hljs-tag">&lt;<span class="hljs-name">defaultCache</span> </span><br><span class="hljs-tag">   <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;10000&quot;</span> </span><br><span class="hljs-tag">   <span class="hljs-attr">maxElementsOnDisk</span>=<span class="hljs-string">&quot;10000000&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span> </span><br><span class="hljs-tag">   <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;true&quot;</span> </span><br><span class="hljs-tag">   <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;120&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;120&quot;</span> </span><br><span class="hljs-tag">   <span class="hljs-attr">diskExpiryThreadIntervalSeconds</span>=<span class="hljs-string">&quot;120&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">defaultCache</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ehcache</span>&gt;</span><br> <br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">属性说明：</span><br><span class="hljs-comment">l diskStore：指定数据在磁盘中的存储位置。</span><br><span class="hljs-comment">l defaultCache：当借助CacheManager.add(&quot;demoCache&quot;)创建Cache时，EhCache便会采用&lt;defalutCache/&gt;指定的的管理策略</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">以下属性是必须的：</span><br><span class="hljs-comment">l maxElementsInMemory - 在内存中缓存的element的最大数目 </span><br><span class="hljs-comment">l maxElementsOnDisk - 在磁盘上缓存的element的最大数目，若是0表示无穷大</span><br><span class="hljs-comment">l eternal - 设定缓存的elements是否永远不过期。如果为true，则缓存的数据始终有效，如果为false那么还要根据timeToIdleSeconds，timeToLiveSeconds判断</span><br><span class="hljs-comment">l overflowToDisk - 设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">以下属性是可选的：</span><br><span class="hljs-comment">l timeToIdleSeconds - 当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时，这些数据便会删除，默认值是0,也就是可闲置时间无穷大</span><br><span class="hljs-comment">l timeToLiveSeconds - 缓存element的有效生命期，默认是0.,也就是element存活时间无穷大</span><br><span class="hljs-comment"> diskSpoolBufferSizeMB 这个参数设置DiskStore(磁盘缓存)的缓存区大小.默认是30MB.每个Cache都应该有自己的一个缓冲区.</span><br><span class="hljs-comment">l diskPersistent - 在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false。</span><br><span class="hljs-comment">l diskExpiryThreadIntervalSeconds - 磁盘缓存的清理线程运行间隔，默认是120秒。每个120s，相应的线程会进行一次EhCache中数据的清理工作</span><br><span class="hljs-comment">l memoryStoreEvictionPolicy - 当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出）</span><br><span class="hljs-comment"> --&gt;</span><br></code></pre></td></tr></table></figure><ul><li>配置cache标签<code>&lt;cache type=&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;&gt;&lt;/cache&gt;</code></li></ul><hr><p>演示：</p><p><a href="https://gitee.com/jallenkwong/LearnMyBatis/blob/master/src/main/resources/c05/DepartmentMapper.xml">DepartmentMapper.xml</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;mapper <span class="hljs-attribute">namespace</span>=<span class="hljs-string">&quot;com.lun.c03.mapper.dao.DepartmentMapper&quot;</span>&gt;<br><br>&lt;cache <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;<br><br></code></pre></td></tr></table></figure><hr><p><a href="https://gitee.com/jallenkwong/LearnMyBatis/blob/master/src/test/java/com/lun/c05/cache/CacheTest.java">CacheTest.java</a></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> CacheTest &#123;<br><br>@Test<br>public void test<span class="hljs-constructor">Ehcache()</span> throws IOException &#123;<br>SqlSessionFactory ssf = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Tools</span>.</span></span>get<span class="hljs-constructor">SqlSessionFactory(<span class="hljs-string">&quot;c05/mybatis-config.xml&quot;</span>)</span>;<br>SqlSession session = ssf.<span class="hljs-keyword">open</span><span class="hljs-constructor">Session()</span>;<br>SqlSession session2 = ssf.<span class="hljs-keyword">open</span><span class="hljs-constructor">Session()</span>;<br><br><span class="hljs-keyword">try</span> &#123;<br>DepartmentMapper dm = session.get<span class="hljs-constructor">Mapper(DepartmentMapper.<span class="hljs-params">class</span>)</span>;<br>Department dp = dm.get<span class="hljs-constructor">DeptById(1)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(dp);<br>session.close<span class="hljs-literal">()</span>;<br><br>DepartmentMapper dm2 = session2.get<span class="hljs-constructor">Mapper(DepartmentMapper.<span class="hljs-params">class</span>)</span>;<br>Department dp2 = dm2.get<span class="hljs-constructor">DeptById(1)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(dp2);<br><br>&#125; finally &#123;<br>session2.close<span class="hljs-literal">()</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>另外</strong>：</p><p>参照缓存： 若想在命名空间中共享相同的缓存配置和实例。可以使用 cache-ref 元素来引用另外一个缓存。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.lun.mybatis.dao.DepartmentMapper&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引用缓存：namespace：指定和哪个名称空间下的缓存一样 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cache-ref</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.lun.mybatis.dao.EmployeeMapper&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo操作步骤</title>
    <link href="/2021/02/13/hello-world/"/>
    <url>/2021/02/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Startwq"><a href="#Quick-Startwq" class="headerlink" title="Quick Startwq"></a>Quick Startwq</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
